<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Binary Tree</title>
    <url>/2025/03/15/BinaryTree/</url>
    <content><![CDATA[<h1 id="Binary-Tree"><a href="#Binary-Tree" class="headerlink" title="Binary Tree"></a>Binary Tree</h1><ol>
<li><a href="#what-is-a-binary-tree">What is a Binary Tree?</a></li>
<li><a href="#key-components">Key Components and Terms</a></li>
<li><a href="#types-of-binarytree">Types of Binary Tree On the basis of the completion of levels</a></li>
<li><a href="#traversal-techniques"> Tree Traversal Techniques</a><ul>
<li><a href="#dfs">Depth-First Search (DFS)</a></li>
<li><a href="#bfs">Breadth First Search (BFS)</a></li>
</ul>
</li>
<li><a href="#bst">Binary Search Tree (BST)</a> <ul>
<li><a href="#bstim">BST Implementation</a></li>
<li><a href="#deletebst">How to delete Node in a BST</a></li>
</ul>
</li>
<li><a href="#depth">Maximum Depth of Binary Tree</a></li>
<li><a href="#applications">Real-World Applications</a><span id="more"></span></li>
</ol>
<h2 id="1-What-is-a-Binary-Tree"><a href="#1-What-is-a-Binary-Tree" class="headerlink" title="1. What is a Binary Tree? "></a>1. What is a Binary Tree? <a name="what-is-a-doubly-linked-list"></a></h2><p>A <strong>binary tree</strong> is a <a href="https://en.wikipedia.org/wiki/Tree_(data_structure)">tree data structure</a> in which each node has at most two children, referred to as the <strong>left child</strong> and the <strong>right child</strong>.The topmost node is the <strong>root</strong>, and nodes without children are called <strong>leaves</strong>.It is commonly used in computer science for efficient storage and retrieval of data, with various operations such as insertion, deletion, and traversal.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">     A  &lt;- Root</span><br><span class="line">   /   \</span><br><span class="line">  B     C  &lt;- Children</span><br><span class="line"> / \</span><br><span class="line">D   E  &lt;- Leave</span><br></pre></td></tr></table></figure>
<p>Generic TreeNode class:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class TreeNode&lt;T&gt; where T : IComparable&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line">    public T Data &#123; get; set; &#125;</span><br><span class="line">    public TreeNode&lt;T&gt;? Left &#123; get; set; &#125;</span><br><span class="line">    public TreeNode&lt;T&gt;? Right &#123; get; set; &#125;</span><br><span class="line"></span><br><span class="line">    public TreeNode(T data)</span><br><span class="line">    &#123;</span><br><span class="line">        Data = data;</span><br><span class="line">        Left = null;</span><br><span class="line">        Right = null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-Key-Components-and-Terms"><a href="#2-Key-Components-and-Terms" class="headerlink" title="2. Key Components and Terms: "></a>2. Key Components and Terms: <a name="key-components"></a></h2><ul>
<li><strong>Root</strong>: Top node (A in our example)  </li>
<li><strong>Parent&#x2F;Child</strong>: A is parent of B and C  </li>
<li><strong>Leaf</strong>: Nodes without children (D, E, C)  </li>
<li><strong>Subtree</strong>: Any node with its descendants  </li>
<li><strong>Depth</strong>: Distance from the root to a node (root has default depth 1)</li>
<li><strong>Height</strong>: Longest path from a node to a leaf</li>
<li><strong>Level</strong>: All nodes at the same depth</li>
</ul>
<h2 id="3-Types-of-Binary-Tree-On-the-basis-of-the-completion-of-levels"><a href="#3-Types-of-Binary-Tree-On-the-basis-of-the-completion-of-levels" class="headerlink" title="3. Types of Binary Tree On the basis of the completion of levels "></a>3. Types of Binary Tree On the basis of the completion of levels <a name="types-of-binarytree"></a></h2><ul>
<li>Complete Binary Tree</li>
<li>Perfect Binary Tree</li>
<li>Balanced Binary Tree</li>
</ul>
<h3 id="Perfect-Binary-Tree"><a href="#Perfect-Binary-Tree" class="headerlink" title="Perfect Binary Tree"></a>Perfect Binary Tree</h3><p>A Binary tree is a Perfect Binary Tree in which all the internal nodes have two children and all leaf nodes are at the same level.<br>A Perfect Binary Tree of height h (where the height of the binary tree is the number of edges in the longest path from the root node to any leaf node in the tree, height of root node is 0) has <strong>2<sup>h+1</sup>-1</strong> node.<br><img src="/images/b1.png" alt="pic"></p>
<h3 id="Complete-Binary-Tree"><a href="#Complete-Binary-Tree" class="headerlink" title="Complete Binary Tree"></a>Complete Binary Tree</h3><p>A Binary Tree is a Complete Binary Tree if all the levels are completely filled except possibly the last level and the last level has all keys as left as possible.<br>A complete binary tree is just like a full binary tree, but with two major differences:</p>
<ul>
<li>Every level except the last level must be completely filled.</li>
<li>All the leaf elements must lean towards the left.(I think they must be continuous from left to right)</li>
<li>The last leaf element might not have a right sibling i.e. a complete binary tree doesn’t have to be a full binary tree.<br><img src="/images/b2.png" alt="pic"></li>
</ul>
<h3 id="Full-Binary-Tree"><a href="#Full-Binary-Tree" class="headerlink" title="Full Binary Tree"></a>Full Binary Tree</h3><p>A full binary tree is a binary tree with either zero or two child nodes for each node.<br><img src="/images/b3.png" alt="pic"></p>
<h3 id="Balanced-Binary-Tree"><a href="#Balanced-Binary-Tree" class="headerlink" title="Balanced Binary Tree"></a>Balanced Binary Tree</h3><p>A binary tree is balanced if the height of the tree is O(Log n) where n is the number of nodes. For Example, the AVL tree maintains O(Log n) height by making sure that the difference between the heights of the left and right subtrees is at most <strong>1</strong>(key attribute!). Red-Black trees maintain O(Log n) height by making sure that the number of Black nodes on every root to leaf paths is the same and that there are no adjacent red nodes. Balanced Binary Search trees are performance-wise good as they provide O(log n) time for search, insert and delete.<br><img src="/images/b4.png" alt="pic"></p>
<h2 id="4-Tree-Traversal-Techniques"><a href="#4-Tree-Traversal-Techniques" class="headerlink" title="4. Tree Traversal Techniques "></a>4. Tree Traversal Techniques <a name="traversal-techniques"></a></h2><p>Tree Traversal refers to the process of visiting or accessing each node of the tree exactly once in a certain order. Tree traversal algorithms help us visit and process all the nodes of the tree. Since a tree is not a linear data structure, there can be multiple choices for the next node to be visited. Hence we have many ways to traverse a tree.</p>
<ul>
<li>Depth First Search or DFS<ul>
<li>Inorder Traversal</li>
<li>Preorder Traversal</li>
<li>Postorder Traversal</li>
</ul>
</li>
<li>Level Order Traversal or Breadth First Search or BFS</li>
</ul>
<h3 id="Depth-First-Search-DFS"><a href="#Depth-First-Search-DFS" class="headerlink" title="Depth-First Search (DFS) "></a>Depth-First Search (DFS) <a name="dfs"></a></h3><ul>
<li><p>Inorder Traversal (Left-Root-Right)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void Inorder(TreeNode node) &#123;</span><br><span class="line">    if (node == null) return;</span><br><span class="line">    Inorder(node.Left);</span><br><span class="line">    Console.Write(node.Value + &quot; &quot;);</span><br><span class="line">    Inorder(node.Right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Output</strong>:<code> D B E A C</code></p>
</li>
<li><p>Preorder Traversal (Root-Left-Right)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void Preorder(TreeNode node) &#123;</span><br><span class="line">    if (node == null) return;</span><br><span class="line">    Console.Write(node.Value + &quot; &quot;);</span><br><span class="line">    Preorder(node.Left);</span><br><span class="line">    Preorder(node.Right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Output</strong>:<code>A B D E C</code></p>
</li>
<li><p>Postorder Traversal (Left-Right-Root)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void Postorder(TreeNode node) &#123;</span><br><span class="line">    if (node == null) return;</span><br><span class="line">    Postorder(node.Left);</span><br><span class="line">    Postorder(node.Right);</span><br><span class="line">    Console.Write(node.Value + &quot; &quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Output</strong>: <code>D E B C A</code></p>
</li>
</ul>
<h3 id="Level-Order-Traversal-or-Breadth-First-Search-or-BFS"><a href="#Level-Order-Traversal-or-Breadth-First-Search-or-BFS" class="headerlink" title="Level Order Traversal or Breadth First Search or BFS "></a>Level Order Traversal or Breadth First Search or BFS <a name="bfs"></a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public IList&lt;IList&lt;int&gt;&gt; LevelOrder(TreeNode root)</span><br><span class="line">&#123;</span><br><span class="line">    var res = new List&lt;IList&lt;int&gt;&gt;();</span><br><span class="line">    var que = new Queue&lt;TreeNode&gt;();</span><br><span class="line">    if (root == null) return res;</span><br><span class="line">    que.Enqueue(root);</span><br><span class="line">    while (que.Count != 0)</span><br><span class="line">    &#123;</span><br><span class="line">        var size = que.Count;</span><br><span class="line">        var vec = new List&lt;int&gt;();</span><br><span class="line">        for (int i = 0; i &lt; size; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            var cur = que.Dequeue();</span><br><span class="line">            vec.Add(cur.val);</span><br><span class="line">            if (cur.left != null) que.Enqueue(cur.left);</span><br><span class="line">            if (cur.right != null) que.Enqueue(cur.right);</span><br><span class="line">        &#125;</span><br><span class="line">        res.Add(vec);</span><br><span class="line">    &#125;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Output</strong>: <code>A B C D E</code></p>
<h2 id="5-Binary-Search-Tree-BST"><a href="#5-Binary-Search-Tree-BST" class="headerlink" title="5. Binary Search Tree (BST) "></a>5. Binary Search Tree (BST) <a name="bst"></a></h2><p>Accdoring to the <a href="https://en.wikipedia.org/wiki/Binary_search_tree">wikipedia</a>:</p>
<blockquote>
<p>In computer science, a <strong>binary search tree</strong> (<strong>BST</strong>), also called an <strong>ordered</strong> or <strong>sorted binary tree</strong>, is a rooted binary tree data structure with the key of each internal node being greater than all the keys in the respective node’s left subtree and less than the ones in its right subtree. The time complexity of operations on the binary search tree is linear with respect to the height of the tree.</p>
</blockquote>
<p><strong><a href="https://en.wikipedia.org/wiki/Time_complexity">Time complexity</a> in <a href="https://en.wikipedia.org/wiki/Big_O_notation">big O notation</a></strong></p>
<table>
<thead>
<tr>
<th align="center">Operation</th>
<th align="center">Average</th>
<th align="center">Worst case</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Search</td>
<td align="center">O(log n)</td>
<td align="center">O(n)</td>
</tr>
<tr>
<td align="center">Insert</td>
<td align="center">O(log n)</td>
<td align="center">O(n)</td>
</tr>
<tr>
<td align="center">Delete</td>
<td align="center">O(log n)</td>
<td align="center">O(n)</td>
</tr>
</tbody></table>
<h3 id="BST-Implementation"><a href="#BST-Implementation" class="headerlink" title="BST Implementation "></a>BST Implementation <a name="bstim"></a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class BinarySearchTree&lt;T&gt; where T : IComparable&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line">    private TreeNode&lt;T&gt;? _root;</span><br><span class="line"></span><br><span class="line">    public void Insert(T data)</span><br><span class="line">    &#123;</span><br><span class="line">        _root = InsertRec(_root, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private TreeNode&lt;T&gt; InsertRec(TreeNode&lt;T&gt;? node, T data)</span><br><span class="line">    &#123;</span><br><span class="line">        if (node == null) return new TreeNode&lt;T&gt;(data);</span><br><span class="line">        </span><br><span class="line">        int comparison = data.CompareTo(node.Data);</span><br><span class="line">        if (comparison &lt; 0)</span><br><span class="line">            node.Left = InsertRec(node.Left, data);</span><br><span class="line">        else if (comparison &gt; 0)</span><br><span class="line">            node.Right = InsertRec(node.Right, data);</span><br><span class="line">            </span><br><span class="line">        return node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public bool Search(T data)</span><br><span class="line">    &#123;</span><br><span class="line">        return SearchRec(_root, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private bool SearchRec(TreeNode&lt;T&gt;? node, T data)</span><br><span class="line">    &#123;</span><br><span class="line">        if (node == null) return false;</span><br><span class="line">        </span><br><span class="line">        int comparison = data.CompareTo(node.Data);</span><br><span class="line">        return comparison == 0 || </span><br><span class="line">               SearchRec(comparison &lt; 0 ? node.Left : node.Right, data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="How-to-delete-Node-in-a-BST"><a href="#How-to-delete-Node-in-a-BST" class="headerlink" title="How to delete Node in a BST? "></a>How to delete Node in a BST? <a name="deletebst"></a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public TreeNode DeleteNode(TreeNode root, int key)</span><br><span class="line">&#123;</span><br><span class="line">    /*</span><br><span class="line">     * 1.Not found the target key </span><br><span class="line">     * </span><br><span class="line">     * 2. Found</span><br><span class="line">     * 2.1 the left and right node is null which mean its a leaf node</span><br><span class="line">     * 2.2 the left is null and  the right is not null</span><br><span class="line">     * 2.3 the left is not null and  the right is null</span><br><span class="line">     * 2.4 Both left and right node is not null</span><br><span class="line">     * </span><br><span class="line">     */</span><br><span class="line">    //not found</span><br><span class="line">    if (root == null) return null;</span><br><span class="line">    //Found</span><br><span class="line">    if(root.val == key)</span><br><span class="line">    &#123;</span><br><span class="line">        if (root.left == null &amp;&amp; root.right == null) return null;</span><br><span class="line">        if (root.left == null &amp;&amp; root.right != null) return root.right;</span><br><span class="line">        if (root.left != null &amp;&amp; root.right == null) return root.left;</span><br><span class="line">        if (root.left != null &amp;&amp; root.right != null)</span><br><span class="line">        &#123;</span><br><span class="line">            TreeNode leftode = root.right;</span><br><span class="line">            while(leftode.left != null)</span><br><span class="line">            &#123;</span><br><span class="line">                leftode = leftode.left;</span><br><span class="line">            &#125;</span><br><span class="line">            leftode.left = root.left;</span><br><span class="line">            return root.right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (root.val &gt; key) root.left = DeleteNode(root.left, key);</span><br><span class="line">    if (root.val &lt; key) root.right = DeleteNode(root.right, key);</span><br><span class="line"></span><br><span class="line">    return root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-Maximum-Depth-of-Binary-Tree"><a href="#6-Maximum-Depth-of-Binary-Tree" class="headerlink" title="6. Maximum Depth of Binary Tree "></a>6. Maximum Depth of Binary Tree <a name="depth"></a></h2><p>Given a binary tree, the task is to find the maximum depth of the tree. The maximum depth or height of the tree is the number of edges in the tree from the root to the deepest node.</p>
<ul>
<li><p>Approach 1: Using Recursion – O(n) Time and O(h) Space</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public int MaxDepth(TreeNode root) &#123;</span><br><span class="line">    if(root == null) return 0;</span><br><span class="line"></span><br><span class="line">    int leftDepth = MaxDepth(root.left);</span><br><span class="line">    int rightDepth = MaxDepth(root.right);</span><br><span class="line"></span><br><span class="line">    return 1 + Math.Max(leftDepth, rightDepth);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Approach 2: Level Order Traversal without using Null Delimiter – O(n) Time and O(n) Space</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public int MaxDepth(TreeNode root)</span><br><span class="line">&#123;</span><br><span class="line">    int depth = 0;</span><br><span class="line">    Queue&lt;TreeNode&gt; que = new();</span><br><span class="line">    if (root == null) return depth;</span><br><span class="line">    que.Enqueue(root);</span><br><span class="line">    while (que.Count != 0)</span><br><span class="line">    &#123;</span><br><span class="line">        int size = que.Count;</span><br><span class="line">        depth++;</span><br><span class="line">        for (int i = 0; i &lt; size; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            var node = que.Dequeue();</span><br><span class="line">            if (node.left != null) que.Enqueue(node.left);</span><br><span class="line">            if (node.right != null) que.Enqueue(node.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return depth;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="7-Real-World-Applications"><a href="#7-Real-World-Applications" class="headerlink" title="7. Real-World Applications "></a>7. Real-World Applications <a name="applications"></a></h2><ol>
<li>LINQ Query Optimization<ul>
<li>Expression trees power LINQ queries</li>
</ul>
</li>
<li>Game Development<ul>
<li>Unity uses spatial partitioning trees (Octrees&#x2F;BVH)</li>
</ul>
</li>
<li>Database Systems<ul>
<li>SQL Server uses B-trees for index storage</li>
</ul>
</li>
</ol>
<link rel="stylesheet" href="/css/folder.css" type="text/css"><script src="/js/folder.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Data Structure and Alogrithm</category>
      </categories>
      <tags>
        <tag>Data Structure and Alogrithm</tag>
      </tags>
  </entry>
  <entry>
    <title>Common Binary Tree Problems</title>
    <url>/2025/04/26/Common-Binary-Tree-Problems/</url>
    <content><![CDATA[<ol>
<li><a href="#introduction">Introduction</a>  </li>
<li><a href="#cs">Case Study</a>  <ul>
<li><a href="#case1">Invert Binary Tree</a>  </li>
<li><a href="#case2">Symmetric Tree</a>  </li>
<li><a href="#case3">Maximum Depth of Binary Tree</a>  </li>
<li><a href="#case4">Minimum Depth of Binary Tree</a>  </li>
<li><a href="#case5">Count Complete Tree Nodes</a>  </li>
<li><a href="#case6">Balanced Binary Tree</a>  </li>
<li><a href="#case7">Binary Tree Paths</a>  </li>
<li><a href="#case8">Sum of Left Leaves</a>  </li>
<li><a href="#case9">Find Bottom Left Tree Value</a></li>
</ul>
</li>
</ol>
<span id="more"></span>

<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction<a name="introduction"></a></h2><p>Hello everyone, this is Alex. As we know, a tree is a frequently-used data structure to simulate a hierarchical tree structure.One reason to use trees might be because you want to store information that naturally forms a hierarchy.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">file system</span><br><span class="line">-----------</span><br><span class="line">       /   &lt;-- root</span><br><span class="line">      /      \</span><br><span class="line">...          home</span><br><span class="line">    /          \</span><br><span class="line">   ugrad       course</span><br><span class="line"> /            /    |   \</span><br><span class="line">...        cs101 cs112 cs113  </span><br></pre></td></tr></table></figure>
<p>Also there are some other applications using trees:</p>
<ul>
<li><ol>
<li>Manipulate hierarchical data.</li>
</ol>
</li>
<li><ol start="2">
<li>Make information easy to search (see tree traversal).</li>
</ol>
</li>
<li><ol start="3">
<li>Manipulate sorted lists of data.</li>
</ol>
</li>
<li><ol start="4">
<li>As a workflow for compositing digital images for visual effects.</li>
</ol>
</li>
<li><ol start="5">
<li>Router algorithms</li>
</ol>
</li>
<li><ol start="6">
<li>Form of a multi-stage decision-making (see business chess).</li>
</ol>
</li>
</ul>
<p>A Binary Tree is one of the most typical tree structure. I have posted <a href="/2025/03/15/BinaryTree/" title="Binary Tree">[Binary Tree]</a> which include some significant information definitions and manipulation of  <a href="/2025/03/15/BinaryTree/" title="Binary Tree">[Binary Tree]</a>. Please check it before viewing this article. Here are some common Binary Tree Leetcode problems I have sorted them out.</p>
<p>By completing these problems, you will be able to:</p>
<ul>
<li><ol>
<li>Deeply understand the concept of a binary tree;</li>
</ol>
</li>
<li><ol start="2">
<li>Be familiar with different traversal methods;</li>
</ol>
</li>
<li><ol start="3">
<li>Use recursion to solve binary-tree-related problems;</li>
</ol>
</li>
</ul>
<p>Introduction to Recursion<br>The process in which a function calls itself directly or indirectly is called recursion and the corresponding function is called a recursive function.</p>
<ul>
<li>A recursive algorithm takes one step toward solution and then recursively call itself to further move. The algorithm stops once we reach the solution.</li>
<li>Since called function may further call itself, this process might continue forever. So it is essential to provide a base case to terminate this recursion process.</li>
</ul>
<p><strong>Steps to Implement Recursion</strong>:</p>
<p><strong>Step 1</strong>:Determine the parameters and return values of recursive functions<br>Parameters are pointers to the nodes that need to be passed in, and no other parameters are needed. Usually, the main parameters are set at this time. If other parameters are found to be needed in writing recursive logic, they can be added at any time.<br>In fact, there is no need to return a value, but the pointer given in the question to return the root node can be directly used with the function defined in the question, so the return type of the function is TreeNode.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">invertTree</span><span class="params">(TreeNode root)</span></span><br></pre></td></tr></table></figure>
<p><strong>Step 2</strong>:Determine termination conditions<br>When the current node is empty then return. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (root == NULL) <span class="keyword">return</span> root;</span><br></pre></td></tr></table></figure>
<p>Each recursive call allocates a new Stack Frame in the <code>Call Stack</code> to store the local variables, parameters, and return address of the current function. If there is no termination condition, recursion will continue indefinitely, stack frames will pile up infinitely, and eventually exceed the JVM’s stack space limit —&gt; leading to  <strong><a href="https://en.wikipedia.org/wiki/Stack_overflow">Stack overflow</a></strong> Error.</p>
<p><strong>Step 3</strong>:Determine the logic of single-layer recursion<br>It’s very important to detremine what the logic of single-layer recursion: <a href="/2025/03/15/BinaryTree/" title="Binary Tree">4. Tree Traversal Techniques</a>(Tree Traversal Techniques) like <strong>PreOder</strong>, <strong>PostOrder</strong> and <strong>InOrder</strong> to solve the problem respectively. </p>
<h2 id="Case-Study"><a href="#Case-Study" class="headerlink" title="Case Study "></a>Case Study <a name="cs"></a></h2><h3 id="Inevert-Binary-Tree"><a href="#Inevert-Binary-Tree" class="headerlink" title="Inevert Binary Tree"></a>Inevert Binary Tree<a name="case1"></a></h3><p><img src="/2025/04/26/Common-Binary-Tree-Problems/case1.png" alt="pic"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//DFS</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Both PreOder and PostOder traversal are correct.</span></span><br><span class="line"><span class="comment">     *Inorder is not possible, because first the left child is exchanged for *another child, then the root child is exchanged (after completion, the right *child has become the original left child), and then the right child is *exchanged for another child (at this point, it is actually exchanging for the *original left child)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">invertTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        invertTree(root.left);</span><br><span class="line">        invertTree(root.right);</span><br><span class="line">        swapChildren(root);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swapChildren</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">tmp</span> <span class="operator">=</span> root.left;</span><br><span class="line">        root.left = root.right;</span><br><span class="line">        root.right = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//BFS</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">invertTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;<span class="keyword">return</span> <span class="literal">null</span>;&#125;</span><br><span class="line">        ArrayDeque&lt;TreeNode&gt; deque = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        deque.offer(root);</span><br><span class="line">        <span class="keyword">while</span> (!deque.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> deque.size();</span><br><span class="line">            <span class="keyword">while</span> (size-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> deque.poll();</span><br><span class="line">                swap(node);</span><br><span class="line">                <span class="keyword">if</span> (node.left != <span class="literal">null</span>) deque.offer(node.left);</span><br><span class="line">                <span class="keyword">if</span> (node.right != <span class="literal">null</span>) deque.offer(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">temp</span> <span class="operator">=</span> root.left;</span><br><span class="line">        root.left = root.right;</span><br><span class="line">        root.right = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Symmetric-Tree"><a href="#Symmetric-Tree" class="headerlink" title="Symmetric Tree"></a>Symmetric Tree<a name="case2"></a></h3><p><img src="/2025/04/26/Common-Binary-Tree-Problems/case2.png" alt="pic"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//DFS</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSymmetric1</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> compare(root.left, root.right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">compare</span><span class="params">(TreeNode left, TreeNode right)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//To compare two nodes with different values, first clarify the situation where the two nodes are empty! Otherwise, when comparing numerical values later, the null pointer will be manipulated.</span></span><br><span class="line">        <span class="keyword">if</span> (left == <span class="literal">null</span> &amp;&amp; right != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (left != <span class="literal">null</span> &amp;&amp; right == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (left == <span class="literal">null</span> &amp;&amp; right == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (left.val != right.val) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//TheThe logic of single-layer recursion is to handle situations where both left and right nodes are not empty and have the same value.</span></span><br><span class="line">        <span class="comment">// Compare outside</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">compareOutside</span> <span class="operator">=</span> compare(left.left, right.right);</span><br><span class="line">        <span class="comment">// Compare inside</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">compareInside</span> <span class="operator">=</span> compare(left.right, right.left);</span><br><span class="line">        <span class="keyword">return</span> compareOutside &amp;&amp; compareInside;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//BFS</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSymmetric3</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        Queue&lt;TreeNode&gt; deque = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        deque.offer(root.left);</span><br><span class="line">        deque.offer(root.right);</span><br><span class="line">        <span class="keyword">while</span> (!deque.isEmpty()) &#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">leftNode</span> <span class="operator">=</span> deque.poll();</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">rightNode</span> <span class="operator">=</span> deque.poll();</span><br><span class="line">            <span class="keyword">if</span> (leftNode == <span class="literal">null</span> &amp;&amp; rightNode == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (leftNode == <span class="literal">null</span> || rightNode == <span class="literal">null</span> || leftNode.val != rightNode.val) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">       </span><br><span class="line">            deque.offer(leftNode.left);</span><br><span class="line">            deque.offer(rightNode.right);</span><br><span class="line">            deque.offer(leftNode.right);</span><br><span class="line">            deque.offer(rightNode.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="Maximum-Depth-of-Binary-Tree"><a href="#Maximum-Depth-of-Binary-Tree" class="headerlink" title="Maximum Depth of Binary Tree "></a>Maximum Depth of Binary Tree <a name="case3"></a></h3><p><img src="/2025/04/26/Common-Binary-Tree-Problems/case3.png" alt="pic"></p>
<h3 id="Minimum-Depth-of-Binary-Tree"><a href="#Minimum-Depth-of-Binary-Tree" class="headerlink" title="Minimum Depth of Binary Tree "></a>Minimum Depth of Binary Tree <a name="case4"></a></h3><p><img src="/2025/04/26/Common-Binary-Tree-Problems/case4.png" alt="pic"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//DFS</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The minimum depth is the number of nodes along the shortest path from the * </span></span><br><span class="line"><span class="comment">     * root node down to the nearest leaf nod</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">leftDepth</span> <span class="operator">=</span> minDepth(root.left);</span><br><span class="line">        <span class="type">int</span> <span class="variable">rightDepth</span> <span class="operator">=</span> minDepth(root.right);</span><br><span class="line">        <span class="keyword">if</span> (root.left == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> rightDepth + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.right == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> leftDepth + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Both left and right nodes are not null </span></span><br><span class="line">        <span class="keyword">return</span> Math.min(leftDepth, rightDepth) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//BFS</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Deque&lt;TreeNode&gt; deque = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        deque.offer(root);</span><br><span class="line">        <span class="type">int</span> <span class="variable">depth</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!deque.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> deque.size();</span><br><span class="line">            depth++;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">poll</span> <span class="operator">=</span> deque.poll();</span><br><span class="line">                <span class="keyword">if</span> (poll.left == <span class="literal">null</span> &amp;&amp; poll.right == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// It is a leaf node that directly returns depth. Because it is traversed from top to bottom, this value is the minimum value</span></span><br><span class="line">                    <span class="keyword">return</span> depth;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (poll.left != <span class="literal">null</span>) &#123;</span><br><span class="line">                    deque.offer(poll.left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (poll.right != <span class="literal">null</span>) &#123;</span><br><span class="line">                    deque.offer(poll.right);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> depth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Count-Complete-Tree-Nodes"><a href="#Count-Complete-Tree-Nodes" class="headerlink" title="Count Complete Tree Nodes "></a>Count Complete Tree Nodes <a name="case5"></a></h3><p><img src="/2025/04/26/Common-Binary-Tree-Problems/case5.png" alt="pic"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countNodes</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// we need use postorder traversal to first calculate left node and then right node and then the </span></span><br><span class="line">        <span class="keyword">return</span> countNodes(root.left) + countNodes(root.right) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countNodes</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        queue.offer(root);</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> queue.size();</span><br><span class="line">            <span class="keyword">while</span> (size -- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">                result++;</span><br><span class="line">                <span class="keyword">if</span> (cur.left != <span class="literal">null</span>) queue.offer(cur.left);</span><br><span class="line">                <span class="keyword">if</span> (cur.right != <span class="literal">null</span>) queue.offer(cur.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Balanced-Binary-Tree"><a href="#Balanced-Binary-Tree" class="headerlink" title="Balanced Binary Tree "></a>Balanced Binary Tree <a name="case6"></a></h3><p><img src="/2025/04/26/Common-Binary-Tree-Problems/case6.png" alt="pic"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//DFS</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isBalanced</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getHeight(root) != -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getHeight</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">leftHeight</span> <span class="operator">=</span> getHeight(root.left);</span><br><span class="line">        <span class="keyword">if</span> (leftHeight == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rightHeight</span> <span class="operator">=</span> getHeight(root.right);</span><br><span class="line">        <span class="keyword">if</span> (rightHeight == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// If the height difference between the left and right subtrees is greater than 1, return -1 indicates that it is no longer a balanced tree</span></span><br><span class="line">        <span class="keyword">if</span> (Math.abs(leftHeight - rightHeight) &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.max(leftHeight, rightHeight) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Binary-Tree-Paths"><a href="#Binary-Tree-Paths" class="headerlink" title="Binary Tree Paths "></a>Binary Tree Paths <a name="case7"></a></h3><p><img src="/2025/04/26/Common-Binary-Tree-Problems/case7.png" alt="pic"></p>
<p>Analysis:This question requires a path from the root node to the leaf, so it needs to be traversed in <strong>PreOrder</strong> to make it easier for the parent node to point to the child node and find the corresponding path.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">binaryTreePaths</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;String&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Integer&gt; paths = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        traversal(root, paths, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">traversal</span><span class="params">(TreeNode root, List&lt;Integer&gt; paths, List&lt;String&gt; res)</span> &#123;</span><br><span class="line">        paths.add(root.val);<span class="comment">// PreOder--&gt; mid</span></span><br><span class="line">        <span class="comment">// If we find the leaf node then we need to collect one possible path</span></span><br><span class="line">        <span class="keyword">if</span> (root.left == <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// StringBuilder is used to concatenate strings, which is faster</span></span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; paths.size() - <span class="number">1</span>; i++) &#123;</span><br><span class="line">                sb.append(paths.get(i)).append(<span class="string">&quot;-&gt;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Add last node since we don&#x27;t need -&gt;</span></span><br><span class="line">            sb.append(paths.get(paths.size() - <span class="number">1</span>));</span><br><span class="line">            res.add(sb.toString());<span class="comment">//add one path</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Recursive and backtracking occur simultaneously, so they should be placed in the same curly braces</span></span><br><span class="line">        <span class="keyword">if</span> (root.left != <span class="literal">null</span>) &#123; <span class="comment">// left</span></span><br><span class="line">            traversal(root.left, paths, res);</span><br><span class="line">            paths.remove(paths.size() - <span class="number">1</span>);<span class="comment">// BackTracking</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.right != <span class="literal">null</span>) &#123; <span class="comment">// right</span></span><br><span class="line">            traversal(root.right, paths, res);</span><br><span class="line">            paths.remove(paths.size() - <span class="number">1</span>);<span class="comment">// Backtracking</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//BFS</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">binaryTreePaths</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;String&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        Stack&lt;Object&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        stack.push(root);</span><br><span class="line">        stack.push(root.val + <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> (String) stack.pop();</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> (TreeNode) stack.pop();</span><br><span class="line">            <span class="comment">// leaf node</span></span><br><span class="line">            <span class="keyword">if</span> (node.left == <span class="literal">null</span> &amp;&amp; node.right == <span class="literal">null</span>) &#123;</span><br><span class="line">                result.add(path);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//the right child node is not null</span></span><br><span class="line">            <span class="keyword">if</span> (node.right != <span class="literal">null</span>) &#123;</span><br><span class="line">                stack.push(node.right);</span><br><span class="line">                stack.push(path + <span class="string">&quot;-&gt;&quot;</span> + node.right.val);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//the left child node is not null</span></span><br><span class="line">            <span class="keyword">if</span> (node.left != <span class="literal">null</span>) &#123;</span><br><span class="line">                stack.push(node.left);</span><br><span class="line">                stack.push(path + <span class="string">&quot;-&gt;&quot;</span> + node.left.val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Sum-of-Left-Leaves"><a href="#Sum-of-Left-Leaves" class="headerlink" title="Sum of Left Leaves "></a>Sum of Left Leaves <a name="case8"></a></h3><p><img src="/2025/04/26/Common-Binary-Tree-Problems/case8.png" alt="pic"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sumOfLeftLeaves</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (root.left != <span class="literal">null</span> &amp;&amp; </span><br><span class="line">        root.left.left == <span class="literal">null</span> &amp;&amp; </span><br><span class="line">        root.left.right == <span class="literal">null</span>) &#123;</span><br><span class="line">        sum += root.left.val;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    sum += sumOfLeftLeaves(root.left);</span><br><span class="line">    sum += sumOfLeftLeaves(root.right);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sumOfLeftLeaves</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt; ();</span><br><span class="line">        stack.add(root);</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">            <span class="keyword">if</span> (node.left != <span class="literal">null</span> &amp;&amp; node.left.left == <span class="literal">null</span> &amp;&amp; node.left.right == <span class="literal">null</span>) &#123;</span><br><span class="line">                result += node.left.val;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (node.right != <span class="literal">null</span>) stack.add(node.right);</span><br><span class="line">            <span class="keyword">if</span> (node.left != <span class="literal">null</span>) stack.add(node.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Find-Bottom-Left-Tree-Value"><a href="#Find-Bottom-Left-Tree-Value" class="headerlink" title="Find Bottom Left Tree Value "></a>Find Bottom Left Tree Value <a name="case9"></a></h3><p><img src="/2025/04/26/Common-Binary-Tree-Problems/case9.png" alt="pic"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//DFS</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">Deep</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findBottomLeftValue</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        value = root.val;</span><br><span class="line">        findLeftValue(root,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">findLeftValue</span> <span class="params">(TreeNode root,<span class="type">int</span> deep)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (root.left == <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (deep &gt; Deep) &#123;</span><br><span class="line">                value = root.val;</span><br><span class="line">                Deep = deep;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.left != <span class="literal">null</span>) findLeftValue(root.left,deep + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (root.right != <span class="literal">null</span>) findLeftValue(root.right,deep + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//BFS</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findBottomLeftValue</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        queue.offer(root);</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> queue.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">poll</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">                    res = poll.val;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (poll.left != <span class="literal">null</span>) &#123;</span><br><span class="line">                    queue.offer(poll.left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (poll.right != <span class="literal">null</span>) &#123;</span><br><span class="line">                    queue.offer(poll.right);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/folder.css" type="text/css"><script src="/js/folder.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Data Structure and Alogrithm</category>
        <category>Binary Tree</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Design Patterns</title>
    <url>/2025/04/19/Design-Patterns/</url>
    <content><![CDATA[<ol>
<li><a href="#introduction">Introduction</a>  <ul>
<li><a href="#types-of-dp">Types of Design Patterns</a>  </li>
<li><a href="#key-c-of-dp">Key Characteristics of Design Patterns</a></li>
</ul>
</li>
<li><a href="#cp">Creational Patterns</a>  <ul>
<li><a href="#factoryp">Factory Pattern</a>  </li>
<li><a href="#afactory">Abstract Factory Pattern</a>  </li>
<li><a href="#builder">Builder Pattern</a>  </li>
<li><a href="#singleton-pattern">Singleton Pattern</a></li>
</ul>
</li>
<li><a href="#sp">Structural Patterns</a>  <ul>
<li><a href="#adapter-pattern">Adapter Pattern</a>  </li>
<li><a href="#bridge-pattern">Bridge Pattern</a>  </li>
<li><a href="#composite-pattern">Composite Pattern</a></li>
<li><a href="#decorator-pattern">Decorator Pattern</a>  </li>
<li><a href="#facade-pattern">Facade Pattern</a>  </li>
<li><a href="#flyweight-pattern">Flyweight Pattern</a></li>
<li><a href="#proxy-pattern">Proxy Pattern</a></li>
</ul>
</li>
<li><a href="#behavior-pattern">Behavioral Patterns</a>  <ul>
<li><a href="#observer-pattern">Observer Pattern</a>  </li>
<li><a href="#iterator-pattern">Iterator Pattern</a>  </li>
<li><a href="#command-pattern">Command Pattern</a></li>
<li><a href="#strategy-pattern">Strategy Pattern</a>  </li>
<li><a href="#state-pattern">State Pattern</a>  <span id="more"></span></li>
</ul>
</li>
</ol>
<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction<a name="introduction"></a></h2><p>A design pattern is not a rigid structure to be transplanted directly into source code. Rather, it is a description or a template for solving a particular type of problem that can be deployed in many different situations.Design patterns can be viewed as formalized best practices that the programmer may use to solve common problems when designing a software application or system. Expert object-oriented software engineers use these best practices to write more structured, manageable, and scalable code. Design patterns provide a standard terminology and are specific to particular scenarios and problems. </p>
<p>Object-oriented design patterns typically show relationships and interactions between classes or objects, without specifying the final application classes or objects that are involved.[citation needed] Patterns that imply mutable state may be unsuited for functional programming languages. Some patterns can be rendered unnecessary in languages that have built-in support for solving the problem they are trying to solve, and object-oriented patterns are not necessarily suitable for non-object-oriented languages.</p>
<h3 id="Types-of-Design-Patterns"><a href="#Types-of-Design-Patterns" class="headerlink" title="Types of Design Patterns"></a>Types of Design Patterns<a name="types-of-dp"></a></h3><ul>
<li>Creational Patterns</li>
<li>Structural Patterns</li>
<li>Behavioral Patterns</li>
</ul>
<h3 id="Key-Characteristics-of-Design-Patterns"><a href="#Key-Characteristics-of-Design-Patterns" class="headerlink" title="Key Characteristics of Design Patterns"></a>Key Characteristics of Design Patterns<a name="key-c-of-dp"></a></h3><ul>
<li><strong>Reusability</strong>: Patterns can be applied to different projects and problems, saving time and effort in solving similar issues.</li>
<li><strong>Standardization</strong>: They provide a shared language and understanding among developers, helping in communication and collaboration.</li>
<li><strong>Efficiency</strong>: By using these popular patterns, developers can avoid finding the solution to same recurring problems, which leads to faster development.</li>
<li><strong>Flexibility</strong>: Patterns are abstract solutions&#x2F;templates that can be adapted to fit various scenarios and requirements.</li>
</ul>
<h2 id="Creational-Patterns"><a href="#Creational-Patterns" class="headerlink" title="Creational Patterns"></a>Creational Patterns</h2><p>Core Purpose: Encapsulate object creation logic to decouple object creation from usage.</p>
<h3 id="Factory-Pattern"><a href="#Factory-Pattern" class="headerlink" title="Factory Pattern"></a>Factory Pattern<a name="factoryp"></a></h3><p><img src="/2025/04/19/Design-Patterns/1-1.png" alt="pic"><br>Definition: Uses a factory class to encapsulate object creation, hiding implementation details.<br>Case: Creating different payment methods in an e-commerce platform.</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Abstract Product: Payment interface  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IPayment</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">Pay</span>(<span class="params"><span class="built_in">decimal</span> amnout</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Concrete Product: Alipay Payment  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AlipayPayment</span>: <span class="title">IPayment</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Pay</span>(<span class="params"><span class="built_in">decimal</span> amount</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">       Console.WriteLine(<span class="string">$&quot;Alipay Payment: <span class="subst">&#123;amount:C&#125;</span>&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PaypalPayment</span>: <span class="title">IPayment</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Pay</span>(<span class="params"><span class="built_in">decimal</span> amount</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">      Console.WriteLine(<span class="string">$&quot;Paypal Payment: <span class="subst">&#123;amount:C&#125;</span>&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Factory Class  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PaymentFactory</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IPayment <span class="title">CreatePayment</span>(<span class="params"><span class="built_in">string</span> type</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">if</span> (type == <span class="string">&quot;Alipay&quot;</span>)</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> AlipayPayment();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="string">&quot;Paypal&quot;</span>)</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="comment">// Assuming a PaypalPayment class exists and implements IPayment  </span></span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> PaypalPayment();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">&quot;Unsupported payment type&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//usage</span></span><br><span class="line"><span class="keyword">var</span> pay = PaymentFactory.CreatePayment(<span class="string">&quot;Paypal&quot;</span>);</span><br><span class="line">pay.Pay(<span class="number">199.99</span>m);<span class="comment">// Output: Paypal Payment: $199.99  </span></span><br></pre></td></tr></table></figure>
<h3 id="Abstract-Factory"><a href="#Abstract-Factory" class="headerlink" title="Abstract Factory"></a>Abstract Factory<a name="afactory"></a></h3><p><img src="/2025/04/19/Design-Patterns/1-2.png" alt="pic"><br>The <strong>Abstract Factory Pattern</strong> is a creational design pattern that provides an interface for creating families of related or dependent objects without specifying their concrete classes. It encapsulates a group of individual factories that have a common theme, ensuring product compatibility and decoupling client code from implementation details.<br>Core Concepts:</p>
<ol>
<li><strong>Abstract Factory</strong>: Defines interfaces for creating abstract products.</li>
<li><strong>Concrete Factories</strong>: Implement the abstract factory to produce specific product families.</li>
<li><strong>Abstract Products</strong>: Declare interfaces for a type of product.</li>
<li><strong>Concrete Products</strong>: Implement the abstract product interfaces, created by concrete factories.</li>
<li><strong>Client</strong>: Uses the abstract factory and products without depending on concrete classes.</li>
</ol>
<p>UML Diagram:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──────────────────┐       ┌─────────────────┐</span><br><span class="line">│  AbstractFactory │       │     Client      │</span><br><span class="line">├──────────────────┤       ├─────────────────┤</span><br><span class="line">│+ CreateProductA()│◄───►  │+ UseFactory()   │</span><br><span class="line">│+ CreateProductB()│       └─────────────────┘</span><br><span class="line">└──────────────────┘</span><br><span class="line">        ▲</span><br><span class="line">        │</span><br><span class="line">  ┌─────┴─────┐     ┌───────────────────┐</span><br><span class="line">  │           │     │  ConcreteFactory2   │</span><br><span class="line">  │ConcreteFactory1├────►┌─────────────┐  │</span><br><span class="line">  ├─────────────┐ │  │+ CreateProductA()│</span><br><span class="line">  │+ CreateProductA()│  │+ CreateProductB()│</span><br><span class="line">  │+ CreateProductB()│  └─────────────┘  │</span><br><span class="line">  └─────────────┘     └───────────────────┘</span><br><span class="line"></span><br><span class="line">┌─────────────┐     ┌─────────────┐</span><br><span class="line">│AbstractProductA│  │AbstractProductB │</span><br><span class="line">├─────────────┤     ├─────────────┤</span><br><span class="line">│+ OperationA()│    │+ OperationB() │</span><br><span class="line">└─────────────┘     └─────────────┘</span><br><span class="line">        ▲                    ▲</span><br><span class="line">        │                    │</span><br><span class="line">  ┌─────┴─────┐        ┌─────┴─────┐</span><br><span class="line">  │           │        │           │</span><br><span class="line">  │ProductA1  │        │ProductB1  │</span><br><span class="line">  └───────────┘        └───────────┘</span><br></pre></td></tr></table></figure>
<p>Case: Cross-platform UI components (Windows vs. macOS)</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Button Interface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IButton</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Render</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Checkbox Interface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ICheckbox</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Render</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Button Interface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IButton</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Render</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Checkbox Interface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ICheckbox</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Render</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Windows Products</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WindowsButton</span> : <span class="title">IButton</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Render</span>()</span> =&gt; Console.WriteLine(<span class="string">&quot;Windows Button Rendered&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WindowsCheckbox</span> : <span class="title">ICheckbox</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Render</span>()</span> =&gt; Console.WriteLine(<span class="string">&quot;Windows Checkbox Rendered&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// macOS Products</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MacButton</span> : <span class="title">IButton</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Render</span>()</span> =&gt; Console.WriteLine(<span class="string">&quot;Mac Button Rendered&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MacCheckbox</span> : <span class="title">ICheckbox</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Render</span>()</span> =&gt; Console.WriteLine(<span class="string">&quot;Mac Checkbox Rendered&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Windows Factory</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WindowsFactory</span> : <span class="title">IGUIFactory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IButton <span class="title">CreateButton</span>()</span> =&gt; <span class="keyword">new</span> WindowsButton();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ICheckbox <span class="title">CreateCheckbox</span>()</span> =&gt; <span class="keyword">new</span> WindowsCheckbox();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// macOS Factory</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MacFactory</span> : <span class="title">IGUIFactory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IButton <span class="title">CreateButton</span>()</span> =&gt; <span class="keyword">new</span> MacButton();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ICheckbox <span class="title">CreateCheckbox</span>()</span> =&gt; <span class="keyword">new</span> MacCheckbox();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Application</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IButton _button;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ICheckbox _checkbox;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Application</span>(<span class="params">IGUIFactory factory</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _button = factory.CreateButton();</span><br><span class="line">        _checkbox = factory.CreateCheckbox();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RenderUI</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _button.Render();</span><br><span class="line">        _checkbox.Render();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Usage</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        IGUIFactory factory = <span class="keyword">new</span> WindowsFactory(); <span class="comment">// Or new MacFactory()</span></span><br><span class="line">        <span class="keyword">var</span> app = <span class="keyword">new</span> Application(factory);</span><br><span class="line">        app.RenderUI();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Use Cases：</p>
<ul>
<li><strong>Cross-platform Applications</strong>: As shown in the example above.</li>
<li><strong>Game Development</strong>: Creating different enemy types, weapons, or environments.</li>
<li><strong>Database Access</strong>: Switching between SQL Server, MySQL, etc.</li>
<li><strong>UI Frameworks</strong>: Generating themed components (light&#x2F;dark mode).</li>
</ul>
<h3 id="Builder-Pattern"><a href="#Builder-Pattern" class="headerlink" title="Builder Pattern"></a>Builder Pattern<a name="factoryp"></a></h3><p><img src="/2025/04/19/Design-Patterns/1-3.png" alt="pic"><br>The <strong>Builder Pattern</strong> is a creational design pattern that separates the construction of a complex object from its representation. This allows the same construction process to create different representations, making it ideal for objects with multiple optional parameters or complex assembly steps.<br>Core Concepts:</p>
<ol>
<li><strong>Product</strong>: The complex object being constructed (e.g., a car, user profile).</li>
<li><strong>Abstract Builder</strong>: Defines an interface for building parts of the product.</li>
<li><strong>Concrete Builder</strong>: Implements the builder interface to construct specific product variations.</li>
<li><strong>Director</strong>: Controls the construction process, using the builder to assemble the product step-by-step.</li>
</ol>
<p>UML Diagram:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌───────────┐          ┌─────────────┐  </span><br><span class="line">│  Product  │          │  Director   │  </span><br><span class="line">│+ parts:    │          │+ Construct()│  </span><br><span class="line">│  List&lt;str&gt;│          └─────────────┘  </span><br><span class="line">│+ AddPart()│          ▲             </span><br><span class="line">│+ Show()   │          │             </span><br><span class="line">└───────────┘          │  uses       </span><br><span class="line">                       │             </span><br><span class="line">┌──────────────┐       │  uses        </span><br><span class="line">│ AbstractBuilder│     │             </span><br><span class="line">│+ BuildPartA() │◄─────┘             </span><br><span class="line">│+ BuildPartB() │             </span><br><span class="line">│+ GetResult()  │             </span><br><span class="line">└──────────────┘             </span><br><span class="line">   ▲          ▲             </span><br><span class="line">   │          │             </span><br><span class="line">┌──────────────┐  ┌──────────────┐  </span><br><span class="line">│ ConcreteBuilder1│  │ ConcreteBuilder2│  </span><br><span class="line">│+ BuildPartA() │  │+ BuildPartA() │  </span><br><span class="line">│+ BuildPartB() │  │+ BuildPartB() │  </span><br><span class="line">│+ GetResult()  │  │+ GetResult()  │  </span><br><span class="line">└──────────────┘  └──────────────┘  </span><br></pre></td></tr></table></figure>
<p>Case:Building a computer with optional components (CPU, GPU, RAM).</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//define the product</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Computer</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">private</span> List&lt;<span class="built_in">string</span>&gt; _parts = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddPart</span>(<span class="params"><span class="built_in">string</span> part</span>)</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        _parts.Add(part);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowSpecs</span>()</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Computer Specs:&quot;</span>);  </span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> part <span class="keyword">in</span> _parts)  </span><br><span class="line">        &#123;  </span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;- <span class="subst">&#123;part&#125;</span>&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//2. Create the Abstract Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">ComputerBuilder</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">protected</span> Computer _computer = <span class="keyword">new</span> Computer();  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">BuildCPU</span>()</span>;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">BuildGPU</span>()</span>;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">BuildRAM</span>()</span>;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Computer <span class="title">GetComputer</span>()</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">return</span> _computer;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//3.Implement Concrete Builders</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GamingComputerBuilder</span> : <span class="title">ComputerBuilder</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">BuildCPU</span>()</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        _computer.AddPart(<span class="string">&quot;High-end CPU (e.g., Intel i9)&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">BuildGPU</span>()</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        _computer.AddPart(<span class="string">&quot;Dedicated Gaming GPU (e.g., NVIDIA RTX 4090)&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">BuildRAM</span>()</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        _computer.AddPart(<span class="string">&quot;32GB DDR5 RAM&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OfficeComputerBuilder</span> : <span class="title">ComputerBuilder</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">BuildCPU</span>()</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        _computer.AddPart(<span class="string">&quot;Mid-range CPU (e.g., Intel i5)&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">BuildGPU</span>()</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        _computer.AddPart(<span class="string">&quot;Integrated GPU&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">BuildRAM</span>()</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        _computer.AddPart(<span class="string">&quot;16GB DDR4 RAM&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//4. Define the Director</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ComputerDirector</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Computer <span class="title">Construct</span>(<span class="params">ComputerBuilder builder</span>)</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        builder.BuildCPU();  </span><br><span class="line">        builder.BuildGPU();  </span><br><span class="line">        builder.BuildRAM();  </span><br><span class="line">        <span class="keyword">return</span> builder.GetComputer();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//5.Client Code</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="comment">// Build a gaming computer  </span></span><br><span class="line">        <span class="keyword">var</span> gamingBuilder = <span class="keyword">new</span> GamingComputerBuilder();  </span><br><span class="line">        <span class="keyword">var</span> director = <span class="keyword">new</span> ComputerDirector();  </span><br><span class="line">        <span class="keyword">var</span> gamingPC = director.Construct(gamingBuilder);  </span><br><span class="line">        gamingPC.ShowSpecs();  </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Build an office computer  </span></span><br><span class="line">        <span class="keyword">var</span> officeBuilder = <span class="keyword">new</span> OfficeComputerBuilder();  </span><br><span class="line">        <span class="keyword">var</span> officePC = director.Construct(officeBuilder);  </span><br><span class="line">        officePC.ShowSpecs();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<p>Output:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Computer Specs:  </span><br><span class="line">- High-end CPU (e.g., Intel i9)  </span><br><span class="line">- Dedicated Gaming GPU (e.g., NVIDIA RTX 4090)  </span><br><span class="line">- 32GB DDR5 RAM  </span><br><span class="line"></span><br><span class="line">Computer Specs:  </span><br><span class="line">- Mid-range CPU (e.g., Intel i5)  </span><br><span class="line">- Integrated GPU  </span><br><span class="line">- 16GB DDR4 RAM  </span><br></pre></td></tr></table></figure>
<p>Use Cases:</p>
<ol>
<li><strong>Complex Objects with Many Parameters</strong>: E.g., cars, user profiles, or API requests with optional fields.</li>
<li><strong>Object Assembly with Order Dependency</strong>: When parts must be added in a specific sequence (e.g., initializing components before final assembly).</li>
<li><strong>Fluent Interfaces</strong>: Commonly used to create fluent APIs for readability (e.g., StringBuilder in .NET).</li>
</ol>
<h3 id="Singleton-Pattern"><a href="#Singleton-Pattern" class="headerlink" title="Singleton Pattern"></a>Singleton Pattern<a name="singleton-pattern"></a></h3><p><img src="/2025/04/19/Design-Patterns/1-5.png" alt="pic"><br><strong>The Singleton Pattern</strong> is a creational design pattern that ensures a class has only one instance and provides a global point of access to it. This pattern is useful for systems where exactly one instance is needed to coordinate actions across the system, such as a database connection pool, logging service, or configuration manager.<br>Core Concepts:</p>
<ol>
<li><strong>Private Constructor</strong>: Prevents direct instantiation of the class from outside.</li>
<li><strong>Static Instance</strong>: Holds the single instance of the class.</li>
<li><strong>Public Static Accessor</strong>: Provides global access to the instance.<br>UML Diagram:<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌───────────────┐  </span><br><span class="line">│   Singleton   │  </span><br><span class="line">├───────────────┤  </span><br><span class="line">│- instance: static Singleton  </span><br><span class="line">│+ GetInstance(): static Singleton  </span><br><span class="line">│+ DoSomething(): void  </span><br><span class="line">└───────────────┘  </span><br></pre></td></tr></table></figure>
Implementation Variations:</li>
<li>Basic Singleton (Not Thread-Safe)<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Singleton</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton _instance;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span>()</span> &#123; &#125;  <span class="comment">// Private constructor  </span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">GetInstance</span>()</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">if</span> (_instance == <span class="literal">null</span>)  </span><br><span class="line">        &#123;  </span><br><span class="line">            _instance = <span class="keyword">new</span> Singleton();  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> _instance;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoSomething</span>()</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Singleton is working.&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<strong>Issue</strong>: Not thread-safe. Multiple threads can create instances simultaneously in a multi-threaded environment.</li>
<li>Thread-Safe Singleton (Double-Checked Locking)<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Singleton</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton _instance;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">object</span> _lock = <span class="keyword">new</span> <span class="built_in">object</span>();  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span>()</span> &#123; &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">GetInstance</span>()</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">if</span> (_instance == <span class="literal">null</span>)  <span class="comment">// First check  </span></span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">lock</span> (_lock)        <span class="comment">// Lock for thread safety  </span></span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="keyword">if</span> (_instance == <span class="literal">null</span>)  <span class="comment">// Second check  </span></span><br><span class="line">                &#123;  </span><br><span class="line">                    _instance = <span class="keyword">new</span> Singleton();  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> _instance;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoSomething</span>()</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Singleton is working.&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></li>
<li>Lazy Initialization with Lazy<T><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Singleton</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> Lazy&lt;Singleton&gt; _lazy =  </span><br><span class="line">        <span class="keyword">new</span> Lazy&lt;Singleton&gt;(() =&gt; <span class="keyword">new</span> Singleton());  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span>()</span> &#123; &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">GetInstance</span>()</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">return</span> _lazy.Value;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoSomething</span>()</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Singleton is working.&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
Use Cases:</li>
</ol>
<ul>
<li><strong>Logging Services</strong>: Centralized logging to avoid file conflicts.</li>
<li><strong>Database Connection Pools</strong>: Reuse connections to optimize performance.</li>
<li><strong>Configuration Managers</strong>: Load and manage application settings.</li>
<li><strong>Graphics Managers</strong>: Control rendering or display resources.</li>
</ul>
<h2 id="Structural-Patterns"><a href="#Structural-Patterns" class="headerlink" title="Structural Patterns"></a>Structural Patterns<a name="sp"></a></h2><p>Structural design patterns explain how to assemble objects and classes into larger structures, while keeping these structures flexible and efficient.</p>
<h3 id="Adapter-Pattern"><a href="#Adapter-Pattern" class="headerlink" title="Adapter Pattern"></a>Adapter Pattern<a name="factoryp"></a></h3><p><img src="/2025/04/19/Design-Patterns/2-1.png" alt="pic"><br><strong>The Adapter Pattern</strong> is a structural design pattern that allows objects with incompatible interfaces to collaborate. It acts as a bridge between two incompatible interfaces, converting the interface of one class into another interface clients expect. This pattern is useful for integrating legacy code, third-party libraries, or mismatched components without modifying their original structure.<br>Core Concepts:</p>
<ol>
<li><strong>Target</strong>: The interface that the client expects to interact with.</li>
<li><strong>Adaptee</strong>: The existing class with an incompatible interface.</li>
<li><strong>Adapter</strong>: Converts the adaptee’s interface into the target interface via composition or inheritance.<br>UML Diagram：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌─────────────┐       ┌──────────────┐       ┌─────────────┐  </span><br><span class="line">│   Target    │       │   Adapter    │       │   Adaptee   │  </span><br><span class="line">├─────────────┤       ├──────────────┤       ├─────────────┤  </span><br><span class="line">│+ Request()  │◄───┐  │+ Request()   │       │+ SpecificRequest()  </span><br><span class="line">└─────────────┘    │  ├──────────────┤       └─────────────┘  </span><br><span class="line">                   │  │- adaptee: Adaptee│       ▲  </span><br><span class="line">                   │  └──────────────┘           │  </span><br><span class="line">                   │      ▲                      │  </span><br><span class="line">                   │      │ Implements           │  </span><br><span class="line">                   └────────────────────────-----┘  </span><br></pre></td></tr></table></figure></li>
<li>Object Adapter (Composition)<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Target interface  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ITarget</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">Request</span>()</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// Adaptee (existing class with incompatible interface)  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Adaptee</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">SpecificRequest</span>()</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Specific request from adaptee.&quot;</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// Adapter (wraps the adaptee via composition)  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Adapter</span> : <span class="title">ITarget</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> Adaptee _adaptee;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Adapter</span>(<span class="params">Adaptee adaptee</span>)</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        _adaptee = adaptee;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Request</span>()</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="comment">// Convert the adaptee&#x27;s interface to the target interface  </span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">$&quot;Adapter: <span class="subst">&#123;_adaptee.SpecificRequest()&#125;</span>&quot;</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// Client code  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Client</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UseTarget</span>(<span class="params">ITarget target</span>)</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        Console.WriteLine(target.Request());  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
Usage:<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> adaptee = <span class="keyword">new</span> Adaptee();  </span><br><span class="line"><span class="keyword">var</span> adapter = <span class="keyword">new</span> Adapter(adaptee);  </span><br><span class="line"><span class="keyword">var</span> client = <span class="keyword">new</span> Client();  </span><br><span class="line">client.UseTarget(adapter); <span class="comment">// Output: Adapter: Specific request from adaptee.  </span></span><br></pre></td></tr></table></figure></li>
<li>Class Adapter (Inheritance)<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Target interface  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ITarget</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">Request</span>()</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// Adaptee (existing class with incompatible interface)  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Adaptee</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">SpecificRequest</span>()</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Specific request from adaptee.&quot;</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// Adapter (inherits from both target and adaptee)  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Adapter</span> : <span class="title">Adaptee</span>, <span class="title">ITarget</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Request</span>()</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">$&quot;Adapter: <span class="subst">&#123;<span class="keyword">base</span>.SpecificRequest()&#125;</span>&quot;</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
Note: Class Adapter requires multiple inheritance (not supported in C#), so this example uses composition instead.<br>Use Cases:</li>
<li><strong>Legacy System Integration</strong>: Connect new code with outdated APIs.</li>
<li><strong>Third-Party Libraries</strong>: Adapt external libraries to match your application’s interface.</li>
<li><strong>Data Format Conversion</strong>: Transform data between incompatible formats (e.g., XML to JSON).</li>
<li><strong>Cross-Platform Compatibility</strong>: Adapt platform-specific APIs to a common interface.<br>Real-World Examples:</li>
</ol>
<ul>
<li><strong>.NET Framework</strong>: StreamReader adapts a Stream to a text reader.</li>
<li><strong>Java</strong>: java.util.Arrays.asList() adapts an array to a List.</li>
<li><strong>Web APIs</strong>: Converting REST API responses to internal data models.</li>
</ul>
<h3 id="Bridge-Pattern"><a href="#Bridge-Pattern" class="headerlink" title="Bridge Pattern"></a>Bridge Pattern<a name="bridge-pattern"></a></h3><p><img src="/2025/04/19/Design-Patterns/2-2.png" alt="pic"><br><strong>The Bridge Pattern</strong> is a structural design pattern that decouples an abstraction from its implementation, allowing both to vary independently. It achieves this by separating the hierarchical abstraction (what the system does) from the implementation (how it does it), connected via a bridge interface. This pattern is particularly useful for avoiding a “class explosion” when dealing with multiple dimensions of variability.<br>Core Concepts:</p>
<ol>
<li><strong>Abstraction</strong>: Defines the high-level interface and depends on the implementation interface.</li>
<li><strong>Refined Abstraction</strong>: Extends the abstraction without affecting the implementation.</li>
<li><strong>Implementor</strong>: Defines the interface for the implementation classes.</li>
<li><strong>Concrete Implementor</strong>: Provides the concrete implementation.<br>UML Diagram:<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌────────────────┐                  ┌────────────────┐  </span><br><span class="line">│   Abstraction  │                  │   Implementor  │  </span><br><span class="line">├────────────────┤                  ├────────────────┤  </span><br><span class="line">│- implementor   │                  │+ OperationImpl()│  </span><br><span class="line">│+ Operation()   │                  └────────────────┘  </span><br><span class="line">└────────────────┘                         ▲  </span><br><span class="line">       ▲                                   │  </span><br><span class="line">       │                                   │  </span><br><span class="line">┌────────────────┐            ┌─────────────────────┐  </span><br><span class="line">│RefinedAbstraction│          │  ConcreteImplementorA │  </span><br><span class="line">├────────────────┤            ├─────────────────────┤  </span><br><span class="line">│+ ExtendedOperation()│       │+ OperationImpl()    │  </span><br><span class="line">└────────────────┘            └─────────────────────┘  </span><br><span class="line">                              │  </span><br><span class="line">                              │  </span><br><span class="line">┌─────────────────────┐  </span><br><span class="line">│  ConcreteImplementorB │  </span><br><span class="line">├─────────────────────┤  </span><br><span class="line">│+ OperationImpl()    │  </span><br><span class="line">└─────────────────────┘  </span><br></pre></td></tr></table></figure>
Implementation Example<br>Scenario: Rendering shapes (circle, square) in different formats (vector, raster).</li>
</ol>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Define the Implementor Interface</span></span><br><span class="line"><span class="comment">// Implementor: Renderer  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IRenderer</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">RenderCircle</span>(<span class="params"><span class="built_in">float</span> radius</span>)</span>;  </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">RenderSquare</span>(<span class="params"><span class="built_in">float</span> side</span>)</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//2. Implement Concrete Implementors</span></span><br><span class="line"><span class="comment">// Vector Renderer  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">VectorRenderer</span> : <span class="title">IRenderer</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RenderCircle</span>(<span class="params"><span class="built_in">float</span> radius</span>)</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;Drawing a circle of radius <span class="subst">&#123;radius&#125;</span> in vector format.&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RenderSquare</span>(<span class="params"><span class="built_in">float</span> side</span>)</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;Drawing a square with side <span class="subst">&#123;side&#125;</span> in vector format.&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// Raster Renderer  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RasterRenderer</span> : <span class="title">IRenderer</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RenderCircle</span>(<span class="params"><span class="built_in">float</span> radius</span>)</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;Drawing pixels for a circle of radius <span class="subst">&#123;radius&#125;</span> in raster format.&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RenderSquare</span>(<span class="params"><span class="built_in">float</span> side</span>)</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;Drawing pixels for a square with side <span class="subst">&#123;side&#125;</span> in raster format.&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//3. Define the Abstraction</span></span><br><span class="line"><span class="comment">// Abstraction: Shape  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Shape</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">protected</span> IRenderer renderer;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Shape</span>(<span class="params">IRenderer renderer</span>)</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">this</span>.renderer = renderer;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Draw</span>()</span>;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Resize</span>(<span class="params"><span class="built_in">float</span> factor</span>)</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//4.Implement Refined Abstractions</span></span><br><span class="line"><span class="comment">// Refined Abstraction: Circle  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Circle</span> : <span class="title">Shape</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span> radius;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Circle</span>(<span class="params">IRenderer renderer, <span class="built_in">float</span> radius</span>) : <span class="title">base</span>(<span class="params">renderer</span>)</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">this</span>.radius = radius;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Draw</span>()</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        renderer.RenderCircle(radius);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Resize</span>(<span class="params"><span class="built_in">float</span> factor</span>)</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        radius *= factor;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// Refined Abstraction: Square  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Square</span> : <span class="title">Shape</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span> side;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Square</span>(<span class="params">IRenderer renderer, <span class="built_in">float</span> side</span>) : <span class="title">base</span>(<span class="params">renderer</span>)</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">this</span>.side = side;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Draw</span>()</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        renderer.RenderSquare(side);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Resize</span>(<span class="params"><span class="built_in">float</span> factor</span>)</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        side *= factor;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//5. Client Code</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Client</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Main</span>()</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="comment">// Create renderers  </span></span><br><span class="line">        IRenderer vectorRenderer = <span class="keyword">new</span> VectorRenderer();  </span><br><span class="line">        IRenderer rasterRenderer = <span class="keyword">new</span> RasterRenderer();  </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create shapes with different renderers  </span></span><br><span class="line">        Shape circle = <span class="keyword">new</span> Circle(vectorRenderer, <span class="number">5</span>);  </span><br><span class="line">        Shape square = <span class="keyword">new</span> Square(rasterRenderer, <span class="number">10</span>);  </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Draw shapes  </span></span><br><span class="line">        circle.Draw();    <span class="comment">// Output: Drawing a circle of radius 5 in vector format.  </span></span><br><span class="line">        square.Draw();    <span class="comment">// Output: Drawing pixels for a square with side 10 in raster format.  </span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Resize and redraw  </span></span><br><span class="line">        circle.Resize(<span class="number">2</span>);  </span><br><span class="line">        circle.Draw();    <span class="comment">// Output: Drawing a circle of radius 10 in vector format.  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<p>Use Cases:</p>
<ul>
<li><strong>Cross-Platform Applications</strong>: Separate platform-specific implementations from business logic.</li>
<li><strong>GUI Frameworks</strong>: Render UI components in different styles (e.g., Windows vs. macOS).</li>
<li><strong>Database Drivers</strong>: Connect to different databases (SQL Server, MySQL) using a common interface.</li>
<li><strong>Game Development</strong>: Render graphics using different APIs (DirectX, OpenGL).</li>
</ul>
<h3 id="Composite-Pattern"><a href="#Composite-Pattern" class="headerlink" title="Composite Pattern"></a>Composite Pattern<a name="composite-pattern"></a></h3><p><img src="/2025/04/19/Design-Patterns/2-3.png" alt="pic"><br><strong>The Composite Pattern</strong> is a structural design pattern that lets you compose objects into tree structures to represent part-whole hierarchies. It allows clients to treat individual objects (leaf nodes) and compositions of objects (composite nodes) uniformly, simplifying code by treating all nodes through a common interface.<br>Core Concepts:</p>
<ol>
<li><strong>Component</strong>: Defines the common interface for both leaf and composite nodes.</li>
<li><strong>Leaf</strong>: Represents individual objects (no children).</li>
<li><strong>Composite</strong>: Manages child components, implementing the component interface for child-related operations(add, remove and get).</li>
<li><strong>Client</strong>: Interacts with components through the common interface, unaware of whether they are leaves or composites.<br>UML Diagram:<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──────────────┐  </span><br><span class="line">│   Component  │  </span><br><span class="line">├──────────────┤  </span><br><span class="line">│+ Operation() │  </span><br><span class="line">└──────────────┘  </span><br><span class="line">       ▲  </span><br><span class="line">       │-----------------------|  </span><br><span class="line">┌──────────────┐          ┌──────────────┐  </span><br><span class="line">│    Leaf      │          │   Composite  │  </span><br><span class="line">├──────────────┤          ├──────────────┤  </span><br><span class="line">│+ Operation() │          │+ Add()       │  </span><br><span class="line">│              │          │+ Remove()    │  </span><br><span class="line">│              │          │+ GetChild()  │  </span><br><span class="line">└──────────────┘          └──────────────┘  </span><br></pre></td></tr></table></figure>
Use case: A file system with directories (composites) and files (leaves).<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. Define the Component Interface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">FileSystemComponent</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Display</span>(<span class="params"><span class="built_in">int</span> depth</span>)</span>;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Add</span>(<span class="params">FileSystemComponent component</span>)</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NotSupportedException(<span class="string">&quot;Leaf nodes cannot have children.&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Remove</span>(<span class="params">FileSystemComponent component</span>)</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NotSupportedException(<span class="string">&quot;Leaf nodes cannot have children.&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//2. Implement Leaf Nodes (Files)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">File</span> : <span class="title">FileSystemComponent</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> _name;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">File</span>(<span class="params"><span class="built_in">string</span> name</span>)</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        _name = name;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Display</span>(<span class="params"><span class="built_in">int</span> depth</span>)</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        Console.WriteLine(<span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">&#x27;-&#x27;</span>, depth) + _name);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//3. Implement Composite Nodes (Directories)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Directory</span> : <span class="title">FileSystemComponent</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> _name;  </span><br><span class="line">    <span class="keyword">private</span> List&lt;FileSystemComponent&gt; _children = <span class="keyword">new</span> List&lt;FileSystemComponent&gt;();  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Directory</span>(<span class="params"><span class="built_in">string</span> name</span>)</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        _name = name;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Display</span>(<span class="params"><span class="built_in">int</span> depth</span>)</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        Console.WriteLine(<span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">&#x27;-&#x27;</span>, depth) + _name);  </span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> child <span class="keyword">in</span> _children)  </span><br><span class="line">        &#123;  </span><br><span class="line">            child.Display(depth + <span class="number">2</span>); <span class="comment">// Indent children  </span></span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Add</span>(<span class="params">FileSystemComponent component</span>)</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        _children.Add(component);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Remove</span>(<span class="params">FileSystemComponent component</span>)</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        _children.Remove(component);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//4. Client Code</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Client</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">BuildFileSystem</span>()</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="comment">// Root directory (composite)  </span></span><br><span class="line">        Directory root = <span class="keyword">new</span> Directory(<span class="string">&quot;Root&quot;</span>);  </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Subdirectories and files (composites and leaves)  </span></span><br><span class="line">        Directory docs = <span class="keyword">new</span> Directory(<span class="string">&quot;Documents&quot;</span>);  </span><br><span class="line">        docs.Add(<span class="keyword">new</span> File(<span class="string">&quot;Report.txt&quot;</span>));  </span><br><span class="line">        docs.Add(<span class="keyword">new</span> File(<span class="string">&quot;Budget.xlsx&quot;</span>));  </span><br><span class="line"></span><br><span class="line">        Directory pics = <span class="keyword">new</span> Directory(<span class="string">&quot;Pictures&quot;</span>);  </span><br><span class="line">        pics.Add(<span class="keyword">new</span> File(<span class="string">&quot;Vacation.jpg&quot;</span>));  </span><br><span class="line"></span><br><span class="line">        root.Add(docs);  </span><br><span class="line">        root.Add(pics);  </span><br><span class="line">        root.Add(<span class="keyword">new</span> File(<span class="string">&quot;ReadMe.md&quot;</span>));  </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Display the file system tree  </span></span><br><span class="line">        root.Display(<span class="number">0</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
Output:<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Root  </span><br><span class="line">--Documents  </span><br><span class="line">----Report.txt  </span><br><span class="line">----Budget.xlsx  </span><br><span class="line">--Pictures  </span><br><span class="line">----Vacation.jpg  </span><br><span class="line">--ReadMe.md  </span><br></pre></td></tr></table></figure>
Use Cases:</li>
</ol>
<ul>
<li><strong>File Systems</strong>: Directories (composites) and files (leaves).</li>
<li><strong>GUI Toolkits</strong>: Containers (e.g., panels) and widgets (e.g., buttons).</li>
<li><strong>Organization Charts</strong>: Departments (composites) and employees (leaves).</li>
<li><strong>Tree-Based Data Structures</strong>: XML&#x2F;JSON parsing, syntax trees.</li>
</ul>
<h3 id="Decorator-Pattern"><a href="#Decorator-Pattern" class="headerlink" title="Decorator Pattern"></a>Decorator Pattern<a name="decorator-pattern"></a></h3><p><img src="/2025/04/19/Design-Patterns/2-7.jpg" alt="pic"><br>The <strong>Decorator Pattern</strong> is a structural design pattern that lets you attach new behaviors to objects dynamically by placing these objects inside special wrapper classes. It provides a flexible alternative to subclassing for extending functionality, allowing behavior to be added or removed at runtime.<br>Core Concepts:</p>
<ol>
<li><strong>Component</strong>: Defines the common interface for objects that can have decorations.</li>
<li><strong>Concrete Component</strong>: Implements the base functionality of the component.</li>
<li><strong>Decorator</strong>: Maintains a reference to a component and implements the component interface.</li>
<li><strong>Concrete Decorators</strong>: Add specific behaviors to the component by overriding methods.</li>
</ol>
<p>Use case: Coffee shop where drinks (components) can be decorated with additives (decorators).</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. Define the Component Interface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ICoffee</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">GetDescription</span>()</span>;  </span><br><span class="line">    <span class="function"><span class="built_in">double</span> <span class="title">GetCost</span>()</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//2. Implement Concrete Components</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Espresso</span> : <span class="title">ICoffee</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">GetDescription</span>()</span> =&gt; <span class="string">&quot;Espresso&quot;</span>;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">GetCost</span>()</span> =&gt; <span class="number">1.99</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DarkRoast</span> : <span class="title">ICoffee</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">GetDescription</span>()</span> =&gt; <span class="string">&quot;Dark Roast Coffee&quot;</span>;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">GetCost</span>()</span> =&gt; <span class="number">1.89</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//3. Define the Decorator Base Class</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">CondimentDecorator</span> : <span class="title">ICoffee</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">protected</span> ICoffee _coffee;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CondimentDecorator</span>(<span class="params">ICoffee coffee</span>)</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        _coffee = coffee;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="built_in">string</span> <span class="title">GetDescription</span>()</span>;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="built_in">double</span> <span class="title">GetCost</span>()</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//4. Implement Concrete Decorators</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Mocha</span> : <span class="title">CondimentDecorator</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Mocha</span>(<span class="params">ICoffee coffee</span>) : <span class="title">base</span>(<span class="params">coffee</span>)</span> &#123; &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">GetDescription</span>()</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">return</span> _coffee.GetDescription() + <span class="string">&quot;, Mocha&quot;</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">double</span> <span class="title">GetCost</span>()</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">return</span> _coffee.GetCost() + <span class="number">0.20</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Whip</span> : <span class="title">CondimentDecorator</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Whip</span>(<span class="params">ICoffee coffee</span>) : <span class="title">base</span>(<span class="params">coffee</span>)</span> &#123; &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">GetDescription</span>()</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">return</span> _coffee.GetDescription() + <span class="string">&quot;, Whip&quot;</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">double</span> <span class="title">GetCost</span>()</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">return</span> _coffee.GetCost() + <span class="number">0.10</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//5. Client Code</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Client</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OrderCoffee</span>()</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="comment">// Base coffee  </span></span><br><span class="line">        ICoffee coffee = <span class="keyword">new</span> Espresso();  </span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;coffee.GetDescription()&#125;</span> = $<span class="subst">&#123;coffee.GetCost()&#125;</span>&quot;</span>);  </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Decorated coffee  </span></span><br><span class="line">        ICoffee decoratedCoffee = <span class="keyword">new</span> Whip(<span class="keyword">new</span> Mocha(<span class="keyword">new</span> Mocha(coffee)));  </span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;decoratedCoffee.GetDescription()&#125;</span> = $<span class="subst">&#123;decoratedCoffee.GetCost()&#125;</span>&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<p>Output:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Espresso = $1.99  </span><br><span class="line">Espresso, Mocha, Mocha, Whip = $2.39  </span><br></pre></td></tr></table></figure>
<p>Use Cases:<br><strong>GUI Components</strong>: Adding borders, scroll bars, or tooltips to widgets.<br><strong>I&#x2F;O Streams</strong>: Wrapping streams with buffering, encryption, or compression.<br><strong>Logging</strong>: Adding timestamps, metadata, or formatting to log messages.<br><strong>Security</strong>: Applying authentication or authorization layers to requests.</p>
<h3 id="Facade-Pattern"><a href="#Facade-Pattern" class="headerlink" title="Facade Pattern"></a>Facade Pattern<a name="facade-pattern"></a></h3><p><img src="/2025/04/19/Design-Patterns/2-4.png" alt="pic"><br>The <strong>Facade Pattern</strong> is a structural design pattern that provides a simplified interface to a complex system of classes, libraries, or APIs. It hides the underlying complexity and exposes only high-level functionality, making the system easier to use and maintain. This pattern is commonly used to decouple clients from intricate subsystems.<br>Core Concepts:</p>
<ol>
<li><strong>Facade</strong>: Provides a simplified interface to the subsystem.</li>
<li><strong>Subsystem Classes</strong>: Implement complex functionality but are unaware of the facade.</li>
<li><strong>Client</strong>: Interacts with the facade instead of directly accessing subsystem classes.<br>UML Diagram<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──────────────┐       ┌──────────────────┐  </span><br><span class="line">│    Client    │──────►│     Facade       │  </span><br><span class="line">└──────────────┘       ├──────────────────┤  </span><br><span class="line">                       │+ SimpleOperation()│  </span><br><span class="line">                       └──────────────────┘  </span><br><span class="line">                               ▲  </span><br><span class="line">                               │ uses  </span><br><span class="line">                               │  </span><br><span class="line">┌──────────────┐  ┌──────────────┐  ┌──────────────┐  </span><br><span class="line">│ SubsystemA   │  │ SubsystemB   │  │ SubsystemC   │  </span><br><span class="line">├──────────────┤  ├──────────────┤  ├──────────────┤  </span><br><span class="line">│+ OperationA()│  │+ OperationB()│  │+ OperationC()│  </span><br><span class="line">└──────────────┘  └──────────────┘  └──────────────┘  </span><br></pre></td></tr></table></figure>
Uase case: A home theater system with multiple components (amplifier, DVD player, projector).<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> Define Subsystem Classes</span><br><span class="line"><span class="comment">// Subsystem: Amplifier  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Amplifier</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">On</span>()</span> =&gt; Console.WriteLine(<span class="string">&quot;Amplifier on&quot;</span>);  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Off</span>()</span> =&gt; Console.WriteLine(<span class="string">&quot;Amplifier off&quot;</span>);  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetVolume</span>(<span class="params"><span class="built_in">int</span> level</span>)</span> =&gt; Console.WriteLine(<span class="string">$&quot;Amplifier volume set to <span class="subst">&#123;level&#125;</span>&quot;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// Subsystem: DVD Player  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DvdPlayer</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">On</span>()</span> =&gt; Console.WriteLine(<span class="string">&quot;DVD Player on&quot;</span>);  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Off</span>()</span> =&gt; Console.WriteLine(<span class="string">&quot;DVD Player off&quot;</span>);  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Play</span>(<span class="params"><span class="built_in">string</span> movie</span>)</span> =&gt; Console.WriteLine(<span class="string">$&quot;DVD Player playing &#x27;<span class="subst">&#123;movie&#125;</span>&#x27;&quot;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// Subsystem: Projector  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Projector</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">On</span>()</span> =&gt; Console.WriteLine(<span class="string">&quot;Projector on&quot;</span>);  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Off</span>()</span> =&gt; Console.WriteLine(<span class="string">&quot;Projector off&quot;</span>);  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetInput</span>(<span class="params">DvdPlayer dvd</span>)</span> =&gt; Console.WriteLine(<span class="string">&quot;Projector input set to DVD&quot;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="number">2.</span> Create the Facade</span><br><span class="line"><span class="comment">//public class HomeTheaterFacade  </span></span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> Amplifier _amp;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> DvdPlayer _dvd;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> Projector _projector;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HomeTheaterFacade</span>(<span class="params">Amplifier amp, DvdPlayer dvd, Projector projector</span>)</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        _amp = amp;  </span><br><span class="line">        _dvd = dvd;  </span><br><span class="line">        _projector = projector;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">WatchMovie</span>(<span class="params"><span class="built_in">string</span> movie</span>)</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Get ready to watch a movie...&quot;</span>);  </span><br><span class="line">        _amp.On();  </span><br><span class="line">        _projector.On();  </span><br><span class="line">        _projector.SetInput(_dvd);  </span><br><span class="line">        _dvd.On();  </span><br><span class="line">        _dvd.Play(movie);  </span><br><span class="line">        _amp.SetVolume(<span class="number">10</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">EndMovie</span>()</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Shutting movie theater down...&quot;</span>);  </span><br><span class="line">        _dvd.Off();  </span><br><span class="line">        _projector.Off();  </span><br><span class="line">        _amp.Off();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//3. Client Code</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Client</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UseHomeTheater</span>()</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="comment">// Initialize subsystems  </span></span><br><span class="line">        <span class="keyword">var</span> amp = <span class="keyword">new</span> Amplifier();  </span><br><span class="line">        <span class="keyword">var</span> dvd = <span class="keyword">new</span> DvdPlayer();  </span><br><span class="line">        <span class="keyword">var</span> projector = <span class="keyword">new</span> Projector();  </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create facade  </span></span><br><span class="line">        <span class="keyword">var</span> homeTheater = <span class="keyword">new</span> HomeTheaterFacade(amp, dvd, projector);  </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Simplified interface  </span></span><br><span class="line">        homeTheater.WatchMovie(<span class="string">&quot;Avatar&quot;</span>);  </span><br><span class="line">        Console.WriteLine(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">        homeTheater.EndMovie();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
Output:<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Get ready to watch a movie...  </span><br><span class="line">Amplifier on  </span><br><span class="line">Projector on  </span><br><span class="line">Projector input set to DVD  </span><br><span class="line">DVD Player on  </span><br><span class="line">DVD Player playing &#x27;Avatar&#x27;  </span><br><span class="line">Amplifier volume set to 10  </span><br><span class="line"></span><br><span class="line">Shutting movie theater down...  </span><br><span class="line">DVD Player off  </span><br><span class="line">Projector off  </span><br><span class="line">Amplifier off  </span><br></pre></td></tr></table></figure>
Use Cases:</li>
</ol>
<ul>
<li><strong>Complex APIs</strong>: Simplify third-party libraries (e.g., cloud storage APIs).</li>
<li><strong>Legacy Systems</strong>: Provide a modern interface to outdated code.</li>
<li><strong>Cross-Layer Communication</strong>: Bridge different layers in an application (e.g., UI and business logic).</li>
<li><strong>Testing</strong>: Create facades to mock complex subsystems during unit testing.</li>
</ul>
<h3 id="Flyweight-Pattern"><a href="#Flyweight-Pattern" class="headerlink" title="Flyweight Pattern"></a>Flyweight Pattern<a name="flyweight-pattern"></a></h3><p><img src="/2025/04/19/Design-Patterns/2-5.png" alt="pic"><br>The <strong>Flyweight Pattern</strong> is a structural design pattern that minimizes memory usage by sharing as much data as possible between similar objects. It achieves this by separating intrinsic (shared) state from extrinsic (context-specific) state, allowing objects to be reused across different contexts. This pattern is particularly useful for optimizing memory when dealing with large numbers of similar objects.<br>Core Concepts:</p>
<ol>
<li><strong>Flyweight</strong>: Defines the interface for shared objects, managing intrinsic state.</li>
<li><strong>Concrete Flyweight</strong>: Implements the flyweight interface and stores intrinsic state.</li>
<li><strong>Flyweight Factory</strong>: Manages a pool of flyweight objects, ensuring they are shared and reused.</li>
<li><strong>Client</strong>: Holds extrinsic state and uses the flyweight factory to obtain flyweight instances.</li>
</ol>
<p>Complete code of the flyweight design pattern:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="comment">// Flyweight interface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Icon</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span>;  <span class="comment">// Method to draw the icon at given coordinates</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Concrete Flyweight class representing a File Icon</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FileIcon</span> <span class="keyword">implements</span> <span class="title class_">Icon</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String type;  <span class="comment">// Intrinsic state: type of file icon</span></span><br><span class="line">    <span class="keyword">private</span> String imageName;  <span class="comment">// Intrinsic state: image name specific to the file icon</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FileIcon</span><span class="params">(String type, String imageName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.type = type;</span><br><span class="line">        <span class="built_in">this</span>.imageName = imageName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        <span class="comment">// Simulated logic to load and draw image</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Drawing &quot;</span> + type + <span class="string">&quot; icon with image &quot;</span> + imageName + <span class="string">&quot; at position (&quot;</span> + x + <span class="string">&quot;, &quot;</span> + y + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Concrete Flyweight class representing a Folder Icon</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FolderIcon</span> <span class="keyword">implements</span> <span class="title class_">Icon</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String color;  <span class="comment">// Intrinsic state: color of the folder icon</span></span><br><span class="line">    <span class="keyword">private</span> String imageName;  <span class="comment">// Intrinsic state: image name specific to the folder icon</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FolderIcon</span><span class="params">(String color, String imageName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">        <span class="built_in">this</span>.imageName = imageName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        <span class="comment">// Simulated logic to load and draw image</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Drawing folder icon with color &quot;</span> + color + <span class="string">&quot; and image &quot;</span> + imageName + <span class="string">&quot; at position (&quot;</span> + x + <span class="string">&quot;, &quot;</span> + y + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Flyweight factory to manage creation and retrieval of flyweight objects</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IconFactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Icon&gt; iconCache = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Icon <span class="title function_">getIcon</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="comment">// Check if the icon already exists in the cache</span></span><br><span class="line">        <span class="keyword">if</span> (iconCache.containsKey(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span> iconCache.get(key);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Create a new icon based on the key (type of icon)</span></span><br><span class="line">            Icon icon;</span><br><span class="line">            <span class="keyword">if</span> (key.equals(<span class="string">&quot;file&quot;</span>)) &#123;</span><br><span class="line">                icon = <span class="keyword">new</span> <span class="title class_">FileIcon</span>(<span class="string">&quot;document&quot;</span>, <span class="string">&quot;document.png&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.equals(<span class="string">&quot;folder&quot;</span>)) &#123;</span><br><span class="line">                icon = <span class="keyword">new</span> <span class="title class_">FolderIcon</span>(<span class="string">&quot;blue&quot;</span>, <span class="string">&quot;folder.png&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Unsupported icon type: &quot;</span> + key);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Store the created icon in the cache</span></span><br><span class="line">            iconCache.put(key, icon);</span><br><span class="line">            <span class="keyword">return</span> icon;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Client code to use the flyweight objects (icons)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">IconFactory</span> <span class="variable">iconFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IconFactory</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Draw file icons at different positions</span></span><br><span class="line">        <span class="type">Icon</span> <span class="variable">fileIcon1</span> <span class="operator">=</span> iconFactory.getIcon(<span class="string">&quot;file&quot;</span>);</span><br><span class="line">        fileIcon1.draw(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Icon</span> <span class="variable">fileIcon2</span> <span class="operator">=</span> iconFactory.getIcon(<span class="string">&quot;file&quot;</span>);</span><br><span class="line">        fileIcon2.draw(<span class="number">150</span>, <span class="number">150</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Draw folder icons at different positions</span></span><br><span class="line">        <span class="type">Icon</span> <span class="variable">folderIcon1</span> <span class="operator">=</span> iconFactory.getIcon(<span class="string">&quot;folder&quot;</span>);</span><br><span class="line">        folderIcon1.draw(<span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Icon</span> <span class="variable">folderIcon2</span> <span class="operator">=</span> iconFactory.getIcon(<span class="string">&quot;folder&quot;</span>);</span><br><span class="line">        folderIcon2.draw(<span class="number">250</span>, <span class="number">250</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Use Cases:</p>
<ul>
<li><strong>Graphics Systems</strong>: Reuse shared textures, sprites, or glyphs.</li>
<li><strong>Game Development</strong>: Share common assets (e.g., terrain tiles, enemy models).</li>
<li><strong>Document Editors</strong>: Reuse characters, fonts, or formatting styles.</li>
<li><strong>Database Connections</strong>: Pool and reuse connection objects.</li>
</ul>
<h3 id="Proxy-Pattern"><a href="#Proxy-Pattern" class="headerlink" title="Proxy Pattern"></a>Proxy Pattern<a name="proxy-pattern"></a></h3><p><img src="/2025/04/19/Design-Patterns/2-6.png" alt="pic"><br>The <strong>Proxy Pattern</strong> is a structural design pattern that provides a surrogate or placeholder for another object to control access to it. Proxies act as intermediaries between clients and real objects, allowing additional functionality (e.g., lazy loading, access control, logging) without changing the real object’s interface.<br>Core Concepts</p>
<ol>
<li><strong>Subject</strong>: Defines the common interface for the RealSubject and Proxy.</li>
<li><strong>RealSubject</strong>: Implements the subject interface, containing the actual business logic.</li>
<li><strong>Proxy</strong>: Maintains a reference to the RealSubject and controls access to it.</li>
<li><strong>Client</strong>: Interacts with the Proxy as if it were the RealSubject.<br>UML Diagram:<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──────────────┐       ┌──────────────┐       ┌──────────────┐  </span><br><span class="line">│    Subject   │       │     Proxy    │       │ RealSubject  │  </span><br><span class="line">├──────────────┤       ├──────────────┤       ├──────────────┤  </span><br><span class="line">│+ Request()   │       │- realSubject │       │+ Request()   │  </span><br><span class="line">└──────────────┘       │+ Request()   │       └──────────────┘  </span><br><span class="line">          ▲            └──────────────┘                ▲  </span><br><span class="line">          │                     ▲                      │  </span><br><span class="line">          │                     │                      │  </span><br><span class="line">          └─────────────────────┼───────────────────── ┘  </span><br><span class="line">                                │  </span><br><span class="line">┌───────────────────────────────────────────────────────┐  </span><br><span class="line">│                      Client                           │  </span><br><span class="line">└───────────────────────────────────────────────────────┘  </span><br></pre></td></tr></table></figure>
Use case:A high-resolution image loader with lazy initialization.<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. Define the Subject Interface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IImage</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Display</span>()</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//2. Implement the RealSubject</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RealImage</span> : <span class="title">IImage</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="built_in">string</span> _fileName;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RealImage</span>(<span class="params"><span class="built_in">string</span> fileName</span>)</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        _fileName = fileName;  </span><br><span class="line">        LoadFromDisk(_fileName);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Display</span>()</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;Displaying <span class="subst">&#123;_fileName&#125;</span>&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">LoadFromDisk</span>(<span class="params"><span class="built_in">string</span> fileName</span>)</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;Loading <span class="subst">&#123;fileName&#125;</span>&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//3. Implement the Proxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ProxyImage</span> : <span class="title">IImage</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">private</span> RealImage _realImage;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="built_in">string</span> _fileName;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProxyImage</span>(<span class="params"><span class="built_in">string</span> fileName</span>)</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        _fileName = fileName;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Display</span>()</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">if</span> (_realImage == <span class="literal">null</span>)  </span><br><span class="line">        &#123;  </span><br><span class="line">            _realImage = <span class="keyword">new</span> RealImage(_fileName);  </span><br><span class="line">        &#125;  </span><br><span class="line">        _realImage.Display();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//4. Client Code</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Client</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UseImage</span>()</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        IImage image = <span class="keyword">new</span> ProxyImage(<span class="string">&quot;high_res.jpg&quot;</span>);  </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Image is not loaded until Display() is called  </span></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Calling Display() for the first time:&quot;</span>);  </span><br><span class="line">        image.Display();  </span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;\nCalling Display() again:&quot;</span>);  </span><br><span class="line">        image.Display();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
Output:<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Calling Display() for the first time:  </span><br><span class="line">Loading high_res.jpg  </span><br><span class="line">Displaying high_res.jpg  </span><br><span class="line"></span><br><span class="line">Calling Display() again:  </span><br><span class="line">Displaying high_res.jpg  </span><br></pre></td></tr></table></figure>
Use Cases:</li>
</ol>
<ul>
<li><strong>Remote Proxies</strong>: Hide network communication details (e.g., .NET Remoting).</li>
<li><strong>Virtual Proxies</strong>: Delay expensive operations (e.g., lazy loading images).</li>
<li><strong>Protection Proxies</strong>: Control access based on permissions (e.g., user roles).</li>
<li><strong>Smart References</strong>: Add additional behavior when accessing an object (e.g., reference counting).</li>
</ul>
<h2 id="Behavioral-Patterns"><a href="#Behavioral-Patterns" class="headerlink" title="Behavioral Patterns"></a>Behavioral Patterns<a name="behavior-pattern"></a></h2><h3 id="Observer-Pattern"><a href="#Observer-Pattern" class="headerlink" title="Observer Pattern"></a>Observer Pattern<a name="observer-pattern"></a></h3><p>The <strong>Observer Pattern</strong> is a behavioral design pattern that establishes a one-to-many dependency between objects. When one object (the subject) changes state, all its dependents (the observers) are notified and updated automatically. This pattern is ideal for implementing event-driven systems, where multiple components need to react to state changes.<br>Core Concepts:</p>
<ol>
<li><strong>Subject</strong>: Manages a list of observers and notifies them of state changes.</li>
<li><strong>Observer</strong>: Defines an interface for receiving updates from the subject.</li>
<li><strong>Concrete Subject</strong>: Implements the subject interface and stores state that interests observers.</li>
<li><strong>Concrete Observe</strong>r: Implements the observer interface and maintains a reference to the concrete subject.</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Observer Interface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(String weather)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Subject Interface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addObserver</span><span class="params">(Observer observer)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">removeObserver</span><span class="params">(Observer observer)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">notifyObservers</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ConcreteSubject Class</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WeatherStation</span> <span class="keyword">implements</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Observer&gt; observers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> String weather;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addObserver</span><span class="params">(Observer observer)</span> &#123;</span><br><span class="line">        observers.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeObserver</span><span class="params">(Observer observer)</span> &#123;</span><br><span class="line">        observers.remove(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notifyObservers</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Observer observer : observers) &#123;</span><br><span class="line">            observer.update(weather);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWeather</span><span class="params">(String newWeather)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.weather = newWeather;</span><br><span class="line">        notifyObservers();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ConcreteObserver Class</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PhoneDisplay</span> <span class="keyword">implements</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String weather;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(String weather)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.weather = weather;</span><br><span class="line">        display();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Phone Display: Weather updated - &quot;</span> + weather);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ConcreteObserver Class</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TVDisplay</span> <span class="keyword">implements</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String weather;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(String weather)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.weather = weather;</span><br><span class="line">        display();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;TV Display: Weather updated - &quot;</span> + weather);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Usage Class</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WeatherApp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">WeatherStation</span> <span class="variable">weatherStation</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WeatherStation</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Observer</span> <span class="variable">phoneDisplay</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PhoneDisplay</span>();</span><br><span class="line">        <span class="type">Observer</span> <span class="variable">tvDisplay</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TVDisplay</span>();</span><br><span class="line"></span><br><span class="line">        weatherStation.addObserver(phoneDisplay);</span><br><span class="line">        weatherStation.addObserver(tvDisplay);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Simulating weather change</span></span><br><span class="line">        weatherStation.setWeather(<span class="string">&quot;Sunny&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Output:</span></span><br><span class="line">        <span class="comment">// Phone Display: Weather updated - Sunny</span></span><br><span class="line">        <span class="comment">// TV Display: Weather updated - Sunny</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Output:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Phone Display: Weather updated - Sunny</span><br><span class="line">TV Display: Weather updated - Sunny</span><br></pre></td></tr></table></figure>
<p>Real-World Examples:</p>
<ul>
<li><strong>Java Event Listeners</strong>: ActionListener in Swing components.</li>
<li><strong>.NET Events</strong>: System.EventHandler and event subscribers.</li>
<li><strong>RxJava&#x2F;Rx.NET</strong>: Reactive Extensions use the observer pattern for asynchronous streams.</li>
</ul>
<h3 id="Iterator-Pattern"><a href="#Iterator-Pattern" class="headerlink" title="Iterator Pattern"></a>Iterator Pattern<a name="iterator-pattern"></a></h3><p><img src="/2025/04/19/Design-Patterns/3-1.png" alt="pic"><br>The <strong>Iterator Pattern</strong> is a behavioral design pattern that provides a way to access the elements of an aggregate object (e.g., a collection) sequentially without exposing its underlying representation. It decouples the traversal logic from the collection, allowing different traversal algorithms or multiple traversals simultaneously.<br>Core Concepts:</p>
<ol>
<li><strong>Iterator</strong>: Defines an interface for accessing and traversing elements.</li>
<li><strong>Concrete Iterator</strong>: Implements the iterator interface, tracking the current position in the collection.</li>
<li><strong>Aggregate</strong>: Defines an interface for creating an iterator.</li>
<li><strong>Concrete Aggregate</strong>: Implements the aggregate interface to return a concrete iterator.<br>Use case: A custom collection (name repository) with a forward iterator.<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. Define the Iterator Interface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IIterator</span>&lt;<span class="title">T</span>&gt;  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="function"><span class="built_in">bool</span> <span class="title">HasNext</span>()</span>;  </span><br><span class="line">    <span class="function">T <span class="title">Next</span>()</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//2. Define the Aggregate Interface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IAggregate</span>&lt;<span class="title">T</span>&gt;  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="function">IIterator&lt;T&gt; <span class="title">CreateIterator</span>()</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//3. Implement the Concrete Iterator</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">NameIterator</span> : <span class="title">IIterator</span>&lt;<span class="title">string</span>&gt;  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="built_in">string</span>[] _names;  </span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> _position = <span class="number">0</span>;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NameIterator</span>(<span class="params"><span class="built_in">string</span>[] names</span>)</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        _names = names;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">HasNext</span>()</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">return</span> _position &lt; _names.Length &amp;&amp; _names[_position] != <span class="literal">null</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Next</span>()</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">if</span> (HasNext())  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">return</span> _names[_position++];  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//4. Implement the Concrete Aggregate</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">NameRepository</span> : <span class="title">IAggregate</span>&lt;<span class="title">string</span>&gt;  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="built_in">string</span>[] _names = &#123; <span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Charlie&quot;</span>, <span class="string">&quot;David&quot;</span> &#125;;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IIterator&lt;<span class="built_in">string</span>&gt; <span class="title">CreateIterator</span>()</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> NameIterator(_names);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//5. Client Code</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Client</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UseIterator</span>()</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        IAggregate&lt;<span class="built_in">string</span>&gt; repository = <span class="keyword">new</span> NameRepository();  </span><br><span class="line">        IIterator&lt;<span class="built_in">string</span>&gt; iterator = repository.CreateIterator();  </span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Names:&quot;</span>);  </span><br><span class="line">        <span class="keyword">while</span> (iterator.HasNext())  </span><br><span class="line">        &#123;  </span><br><span class="line">            Console.WriteLine(iterator.Next());  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
Output:<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Names:  </span><br><span class="line">Alice  </span><br><span class="line">Bob  </span><br><span class="line">Charlie  </span><br><span class="line">David  </span><br></pre></td></tr></table></figure>
Use Cases:</li>
</ol>
<ul>
<li><strong>Custom Collections</strong>: Traverse non-standard data structures (e.g., trees, graphs).</li>
<li><strong>Database Results</strong>: Iterate over query results without exposing underlying data.</li>
<li><strong>File System Navigation</strong>: Traverse directories and files.</li>
<li><strong>Parallel Processing</strong>: Split traversal tasks across multiple threads.</li>
</ul>
<h3 id="Command-Pattern"><a href="#Command-Pattern" class="headerlink" title="Command Pattern"></a>Command Pattern<a name="command-pattern"></a></h3><p><img src="/2025/04/19/Design-Patterns/3-2.png" alt="pic"><br>The <strong>Command Pattern</strong> is a behavioral design pattern that turns a request into a stand-alone object, containing all information about the request. This decouples the sender (invoker) from the receiver (executor), allowing requests to be parameterized, queued, logged, or undone.<br>Core Concepts:</p>
<ol>
<li><strong>Command</strong>: Defines an interface for executing an operation.</li>
<li><strong>Concrete Command</strong>: Implements the command interface, binding a receiver to an action.</li>
<li><strong>Invoker</strong>: Asks the command to carry out the request.</li>
<li><strong>Receiver</strong>: Knows how to perform the operation associated with the command.</li>
<li><strong>Client</strong>: Creates a concrete command and sets its receiver.<br>Uase case: A remote control (invoker) that can turn on&#x2F;off a light (receiver) using commands.<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. Define the Command Interface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ICommand</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Execute</span>()</span>;  </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Undo</span>()</span>;  <span class="comment">// Optional for undo functionality  </span></span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//2. Implement Concrete Commands</span></span><br><span class="line"><span class="comment">// Light On Command  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LightOnCommand</span> : <span class="title">ICommand</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> Light _light;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LightOnCommand</span>(<span class="params">Light light</span>)</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        _light = light;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Execute</span>()</span> =&gt; _light.TurnOn();  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Undo</span>()</span> =&gt; _light.TurnOff();  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// Light Off Command  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LightOffCommand</span> : <span class="title">ICommand</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> Light _light;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LightOffCommand</span>(<span class="params">Light light</span>)</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        _light = light;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Execute</span>()</span> =&gt; _light.TurnOff();  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Undo</span>()</span> =&gt; _light.TurnOn();  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//3. Define the Receiver</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Light</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TurnOn</span>()</span> =&gt; Console.WriteLine(<span class="string">&quot;Light is on&quot;</span>);  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TurnOff</span>()</span> =&gt; Console.WriteLine(<span class="string">&quot;Light is off&quot;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//4. Implement the Invoker</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RemoteControl</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">private</span> ICommand _command;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetCommand</span>(<span class="params">ICommand command</span>)</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        _command = command;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PressButton</span>()</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        _command.Execute();  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PressUndoButton</span>()</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        _command.Undo();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//5. Client Code</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Client</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UseRemoteControl</span>()</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="comment">// Create receiver  </span></span><br><span class="line">        Light light = <span class="keyword">new</span> Light();  </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create commands  </span></span><br><span class="line">        ICommand lightOn = <span class="keyword">new</span> LightOnCommand(light);  </span><br><span class="line">        ICommand lightOff = <span class="keyword">new</span> LightOffCommand(light);  </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create invoker  </span></span><br><span class="line">        RemoteControl remote = <span class="keyword">new</span> RemoteControl();  </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Use invoker to execute commands  </span></span><br><span class="line">        remote.SetCommand(lightOn);  </span><br><span class="line">        remote.PressButton();  <span class="comment">// Output: Light is on  </span></span><br><span class="line"></span><br><span class="line">        remote.SetCommand(lightOff);  </span><br><span class="line">        remote.PressButton();  <span class="comment">// Output: Light is off  </span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Undo last command  </span></span><br><span class="line">        remote.PressUndoButton();  <span class="comment">// Output: Light is on  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
Use Cases:</li>
</ol>
<ul>
<li><strong>GUI Buttons</strong>: Map button clicks to specific actions (e.g., “Save” command).</li>
<li><strong>Undo&#x2F;Redo Systems</strong>: Track and reverse user actions in applications.</li>
<li><strong>Transaction Management</strong>: Group commands into atomic operations.</li>
<li><strong>Networking</strong>: Send commands over a network (e.g., remote procedure calls).</li>
</ul>
<p>Real-World Examples:</p>
<ul>
<li><strong>Java Thread Pool</strong>: Runnable and Callable interfaces act as commands.</li>
<li><strong>.NET Delegate</strong>: Encapsulates a method call as an object.</li>
<li><strong>GUI Frameworks</strong>: Action classes (e.g., javax.swing.Action in Java).</li>
</ul>
<h3 id="Strategy-Pattern"><a href="#Strategy-Pattern" class="headerlink" title="Strategy Pattern"></a>Strategy Pattern<a name="strategy-pattern"></a></h3><p><img src="/2025/04/19/Design-Patterns/3-3.png" alt="pic"><br>The <strong>Strategy Pattern</strong> is a behavioral design pattern that defines a family of algorithms, encapsulates each one, and makes them interchangeable. It lets the algorithm vary independently from the clients that use it, promoting flexibility and maintainability.<br>Core Concepts:</p>
<ol>
<li><strong>Strategy</strong>: Defines the common interface for all concrete algorithms.</li>
<li><strong>Concrete Strategies</strong>: Implement the strategy interface with specific algorithms.</li>
<li><strong>Context</strong>: Maintains a reference to a strategy and uses it to perform a task.</li>
<li><strong>Client</strong>: Configures the context with a specific strategy.</li>
</ol>
<p>Use case: A payment processor supporting multiple payment methods (credit card, PayPal).</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. Define the Strategy Interface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IPaymentStrategy</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Pay</span>(<span class="params"><span class="built_in">double</span> amount</span>)</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//2. Implement Concrete Strategies</span></span><br><span class="line"><span class="comment">// Credit Card Payment  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CreditCardStrategy</span> : <span class="title">IPaymentStrategy</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="built_in">string</span> _cardNumber;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="built_in">string</span> _expiryDate;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="built_in">string</span> _cvv;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CreditCardStrategy</span>(<span class="params"><span class="built_in">string</span> cardNumber, <span class="built_in">string</span> expiryDate, <span class="built_in">string</span> cvv</span>)</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        _cardNumber = cardNumber;  </span><br><span class="line">        _expiryDate = expiryDate;  </span><br><span class="line">        _cvv = cvv;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Pay</span>(<span class="params"><span class="built_in">double</span> amount</span>)</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;Paid $<span class="subst">&#123;amount&#125;</span> via Credit Card (<span class="subst">&#123;_cardNumber.Substring(_cardNumber.Length - <span class="number">4</span>)&#125;</span>)&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// PayPal Payment  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PayPalStrategy</span> : <span class="title">IPaymentStrategy</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="built_in">string</span> _email;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PayPalStrategy</span>(<span class="params"><span class="built_in">string</span> email</span>)</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        _email = email;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Pay</span>(<span class="params"><span class="built_in">double</span> amount</span>)</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;Paid $<span class="subst">&#123;amount&#125;</span> via PayPal (<span class="subst">&#123;_email&#125;</span>)&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//3. Implement the Context</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ShoppingCart</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">private</span> IPaymentStrategy _paymentStrategy;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetPaymentStrategy</span>(<span class="params">IPaymentStrategy strategy</span>)</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        _paymentStrategy = strategy;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Checkout</span>(<span class="params"><span class="built_in">double</span> amount</span>)</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        _paymentStrategy.Pay(amount);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//4. Client Code</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Client</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ProcessPayment</span>()</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">var</span> cart = <span class="keyword">new</span> ShoppingCart();  </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Pay with credit card  </span></span><br><span class="line">        cart.SetPaymentStrategy(<span class="keyword">new</span> CreditCardStrategy(<span class="string">&quot;1234-5678-9012-3456&quot;</span>, <span class="string">&quot;12/25&quot;</span>, <span class="string">&quot;123&quot;</span>));  </span><br><span class="line">        cart.Checkout(<span class="number">100.50</span>);  </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Switch to PayPal  </span></span><br><span class="line">        cart.SetPaymentStrategy(<span class="keyword">new</span> PayPalStrategy(<span class="string">&quot;user@example.com&quot;</span>));  </span><br><span class="line">        cart.Checkout(<span class="number">50.25</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<p>Output:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">plaintext</span><br><span class="line">Paid $100.5 via Credit Card (3456)  </span><br><span class="line">Paid $50.25 via PayPal (user@example.com)  </span><br></pre></td></tr></table></figure>
<p>Use Cases:</p>
<ul>
<li><strong>Sorting Algorithms</strong>: Choose between quicksort, mergesort, or bubblesort dynamically.</li>
<li><strong>Encryption&#x2F;Compression</strong>: Switch between different algorithms (e.g., AES vs. RSA).</li>
<li><strong>Payment Processing</strong>: Support multiple payment methods (credit card, PayPal, Apple Pay).</li>
<li><strong>Game AI</strong>: Implement different behaviors for characters (aggressive, defensive, passive).</li>
</ul>
<h3 id="State-Pattern"><a href="#State-Pattern" class="headerlink" title="State Pattern"></a>State Pattern<a name="state-pattern"></a></h3><p><img src="/2025/04/19/Design-Patterns/3-7.png" alt="pic"><br>The <strong>State Pattern</strong> is a behavioral design pattern that allows an object to alter its behavior when its internal state changes. The object will appear to change its class, as the pattern encapsulates state-specific behaviors into separate state classes and delegates to the current state. This simplifies complex state-dependent logic and adheres to the Open&#x2F;Closed Principle.<br>Core Concepts:</p>
<ol>
<li><strong>Context</strong>: Maintains an instance of a concrete state, which represents its current state.</li>
<li><strong>State Interface</strong>: Defines a common interface for all concrete states.</li>
<li><strong>Concrete States</strong>: Implement the state interface, providing behavior specific to a state.</li>
<li><strong>State Transitions</strong>: Managed by the state classes themselves or the context, depending on the implementation.</li>
</ol>
<p>Use case:User interactions with the vending machine trigger state transitions. For example, when a user inserts money, the vending machine transitions from the “ReadyState” to the “PaymentPendingState.”</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">VendingMachineState</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">handleRequest</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ReadyState</span> <span class="keyword">implements</span> <span class="title class_">VendingMachineState</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleRequest</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Ready state: Please select a product.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProductSelectedState</span> <span class="keyword">implements</span> <span class="title class_">VendingMachineState</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleRequest</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Product selected state: Processing payment.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PaymentPendingState</span> <span class="keyword">implements</span> <span class="title class_">VendingMachineState</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleRequest</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Payment pending state: Dispensing product.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OutOfStockState</span> <span class="keyword">implements</span> <span class="title class_">VendingMachineState</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleRequest</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Out of stock state: Product unavailable. Please select another product.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VendingMachineContext</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> VendingMachineState state;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setState</span><span class="params">(VendingMachineState state)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">request</span><span class="params">()</span> &#123;</span><br><span class="line">        state.handleRequest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// Create context</span></span><br><span class="line">        <span class="type">VendingMachineContext</span> <span class="variable">vendingMachine</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VendingMachineContext</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Set initial state</span></span><br><span class="line">        vendingMachine.setState(<span class="keyword">new</span> <span class="title class_">ReadyState</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Request state change</span></span><br><span class="line">        vendingMachine.request();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Change state</span></span><br><span class="line">        vendingMachine.setState(<span class="keyword">new</span> <span class="title class_">ProductSelectedState</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Request state change</span></span><br><span class="line">        vendingMachine.request();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Change state</span></span><br><span class="line">        vendingMachine.setState(<span class="keyword">new</span> <span class="title class_">PaymentPendingState</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Request state change</span></span><br><span class="line">        vendingMachine.request();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Change state</span></span><br><span class="line">        vendingMachine.setState(<span class="keyword">new</span> <span class="title class_">OutOfStockState</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Request state change</span></span><br><span class="line">        vendingMachine.request();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Output:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Ready state: Please select a product.</span><br><span class="line">Product selected state: Processing payment.</span><br><span class="line">Payment pending state: Dispensing product.</span><br><span class="line">Out of stock state: Product unavailable. Please select another product.</span><br></pre></td></tr></table></figure>

<p>When to use the State Design Pattern：<br>The State design pattern is beneficial when you encounter situations with objects whose behavior changes dynamically based on their internal state. Here are some key indicators:</p>
<ul>
<li><strong>Multiple states with distinct behaviors</strong>: If your object exists in several states (e.g., On&#x2F;Off, Open&#x2F;Closed, Started&#x2F;Stopped), and each state dictates unique behaviors, the State pattern can encapsulate this logic effectively.</li>
<li><strong>Complex conditional logic</strong>: When conditional statements (if-else or switch-case) become extensive and complex within your object, the State pattern helps organize and separate state-specific behavior into individual classes, enhancing readability and maintainability.</li>
<li><strong>Frequent state changes</strong>: If your object transitions between states frequently, the State pattern provides a clear mechanism for managing these transitions and their associated actions.</li>
<li><strong>Adding new states easily</strong>: If you anticipate adding new states in the future, the State pattern facilitates this by allowing you to create new state classes without affecting existing ones.</li>
</ul>
<link rel="stylesheet" href="/css/folder.css" type="text/css"><script src="/js/folder.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Design Patterns</category>
        <category>Software Design</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Java</tag>
        <tag>.NET</tag>
        <tag>Creational Patterns</tag>
        <tag>Structural Patterns</tag>
        <tag>Behavioral Patterns</tag>
      </tags>
  </entry>
  <entry>
    <title>Dynamic Programming</title>
    <url>/2025/03/22/Dynamic-Programming/</url>
    <content><![CDATA[<ol>
<li><a href="#core-concepts">Core Concepts</a></li>
<li><a href="#step-solve">Steps to Solve Problems with Dynamic Programming</a><ul>
<li><a href="#define">Define the State</a></li>
<li><a href="#formulate">Formulate the Transition</a></li>
<li><a href="#boundary-conditions">Initialize the Boundary Conditions</a></li>
<li><a href="#choose-order">Choose an Order</a></li>
<li><a href="#final-result">Return the Final Result</a></li>
</ul>
</li>
<li><a href="#classic-examples">Classic Examples</a><ul>
<li><a href="#fibonacci-sequence">Fibonacci Sequence</a></li>
<li><a href="#01-knapsack-problem">0&#x2F;1 Knapsack Problem</a></li>
</ul>
</li>
<li><a href="#conclusion">Conclusion</a><span id="more"></span></li>
</ol>
<h2 id="Core-concepts"><a href="#Core-concepts" class="headerlink" title="Core concepts"></a>Core concepts</h2><p><strong>Dynamic programming</strong><a name="core-concepts"></a> is both a mathematical optimization method and an algorithmic paradigm. The method was developed by Richard Bellman in the 1950s and has found applications in numerous fields, from aerospace engineering to economics. It is a powerful technique used to solve complex problems by breaking them down into simpler subproblems. It’s widely used in computer science for optimization problems, and once you grasp its core idea, it becomes an invaluable tool in your programming toolkit.</p>
<p>A DP solution hinges on two properties:</p>
<ul>
<li><strong>Overlapping Subproblems</strong>: Means that the problem can be broken down into smaller subproblems, where the solutions to the subproblems are overlapping. Having subproblems that are overlapping means that the solution to one subproblem is part of the solution to another subproblem. I will take <a href="https://en.wikipedia.org/wiki/Fibonacci_sequence">Fibonacci sequence</a> as an example in the coming section.</li>
<li><strong>Optimal Substructure</strong>: Means that the complete solution to a problem can be constructed from the solutions of its smaller subproblems. So not only must the problem have overlapping subproblems, the substructure must also be optimal so that there is a way to piece the solutions to the subproblems together to form the complete solution. I will take the classical <a href="https://en.wikipedia.org/wiki/Knapsack_problem">The 0&#x2F;1 Knapsack Problem</a> as an example, the optimal solution when the knapsack capacity is <code>W</code> can be derived by considering whether to include an item and combining it with the optimal solution when the knapsack capacity is <code>W - weight[i]</code>.</li>
</ul>
<h2 id="Steps-to-Solve-Problems-with-Dynamic-Programming"><a href="#Steps-to-Solve-Problems-with-Dynamic-Programming" class="headerlink" title="Steps to Solve Problems with Dynamic Programming:"></a>Steps to Solve Problems with Dynamic Programming:<a name="step-solve"></a></h2><h3 id="Define-the-State"><a href="#Define-the-State" class="headerlink" title="Define the State:"></a><strong>Define the State</strong>:<a name="define"></a></h3><p>Identify parameters that uniquely describe a subproblem (e.g., indices, capacities). For example, in the 0&#x2F;1 knapsack problem, the state can be defined as <code>dp[i][j]</code>, which represents the maximum value that can be obtained when considering the first i items and a knapsack capacity of j.</p>
<h3 id="Formulate-the-Transition"><a href="#Formulate-the-Transition" class="headerlink" title="Formulate the Transition:"></a><strong>Formulate the Transition</strong>:<a name="formulate"></a></h3><p>Derive a recurrence relation that expresses the state in terms of smaller states.</p>
<h3 id="Initialize-the-Boundary-Conditions"><a href="#Initialize-the-Boundary-Conditions" class="headerlink" title="Initialize the Boundary Conditions:"></a><strong>Initialize the Boundary Conditions</strong>:<a name="boundary-conditions"></a></h3><p>Initialize the Boundary Conditions: Determine the initial values of the states, which are usually the base cases of the problem. For example, in the 0&#x2F;1 knapsack problem, <code>dp[0][j]=0</code> (when there are no items, the value is 0 regardless of the knapsack capacity), and <code>dp[i][0]=0</code> (when the knapsack capacity is 0, the value is 0 regardless of the number of items).</p>
<h3 id="Choose-an-Order"><a href="#Choose-an-Order" class="headerlink" title="Choose an Order:"></a><strong>Choose an Order</strong>:<a name="choose-order"></a></h3><p>Decide whether to solve states top‑down (recursion + memo) or bottom‑up (iteration + table). If using the tabular method(the latter one), fill the state table step-by-step according to the state - transition equation and the initial conditions. This step is usually achieved through nested loops.</p>
<h3 id="Return-the-Final-Result"><a href="#Return-the-Final-Result" class="headerlink" title="Return the Final Result:"></a><strong>Return the Final Result</strong>:<a name="final-result"></a></h3><p>According to the requirements of the problem, obtain the final solution from the state table. For example, in the 0&#x2F;1 knapsack problem, the final result is dp[n][W], that is, the maximum value when considering all n items and a knapsack capacity of <code>W</code>. </p>
<h2 id="Classic-Examples"><a href="#Classic-Examples" class="headerlink" title="Classic Examples"></a>Classic Examples</h2><h3 id="Find-The-nth-Fibonacci-Number"><a href="#Find-The-nth-Fibonacci-Number" class="headerlink" title="Find The nth Fibonacci Number"></a>Find The nth Fibonacci Number<a name="fibonacci-sequence"></a></h3><p>Let us say we want an algorithm that finds the nth Fibonacci number. We don’t know how to find the nth Fibonacci number yet, except that we want to use Dynamic Programming to design the algorithm.</p>
<blockquote>
<p>The Fibonacci numbers is a sequence of numbers starting with 0 and 1 and the next numbers are created by adding the two previous numbers.<br>The 8 first Fibonacci numbers are: <strong>0, 1, 1, 2, 3, 5, 8, 13</strong><br>And counting from 0, the 4th Fibonacci number <code>F(4)</code> is <strong>3</strong>.<br>In general, this is how a Fibonacci number is created based on the two previous:<br>                    <code>F(n) = F(n-1) + F(n-2)</code></p>
</blockquote>
<h4 id="Naive-Recursive-Approach"><a href="#Naive-Recursive-Approach" class="headerlink" title="Naive Recursive Approach"></a>Naive Recursive Approach</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public int Fib2(int n)</span><br><span class="line">&#123;</span><br><span class="line">    if (n &lt; 2) return n;</span><br><span class="line">    return Fib(n - 1) + Fib(n - 2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Time  Complexity: <strong>O(2<sup>n</sup>)</strong></li>
<li>Space Complexity: <strong>O(n)</strong><br>This works, but it is inefficient. For <code>n=40</code>, it takes noticeable time because it recalculates the same Fibonacci numbers repeatedly.</li>
</ul>
<h4 id="Bottom-Up-DP-Tabulation"><a href="#Bottom-Up-DP-Tabulation" class="headerlink" title="Bottom-Up DP (Tabulation)"></a>Bottom-Up DP (Tabulation)</h4><p>We can optimize it using memoization, where we store results in an array:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public int Fib(int n)</span><br><span class="line">&#123;</span><br><span class="line">    if (n &lt; 2) return n;</span><br><span class="line">    int[] dp = new int[n + 1];</span><br><span class="line">    dp[0] = 0;</span><br><span class="line">    dp[1] = 1;</span><br><span class="line">    for(int i = 2; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dp[i] = dp[i - 1] + dp[i - 2];</span><br><span class="line">    &#125;</span><br><span class="line">    return dp[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Time  Complexity: <strong>O(n)</strong></li>
<li>Space Complexity: <strong>O(n)</strong></li>
</ul>
<p>In this version, we fill the <code>dp</code> array from the base cases up to <code>n</code>. It’s still <strong>O(n)</strong> time complexity, but it avoids recursion overhead, making it slightly faster in practice.<br>More efficiently, We only need to maintain two values as we don’t need to record the whole sequence.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public int Fib(int n)</span><br><span class="line">&#123;</span><br><span class="line">    if (n &lt; 2) return n;</span><br><span class="line">    int[] dp = new int[2] &#123;0,1&#125;;</span><br><span class="line">    for(int i = 2; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        int temp = dp[0] + dp[1];</span><br><span class="line">        dp[0] = dp[1];</span><br><span class="line">        dp[1] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    return dp[1];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Time  Complexity: <strong>O(n)</strong></li>
<li>Space Complexity: <strong>O(1)</strong></li>
</ul>
<h3 id="The-0-1-Knapsack-Problem"><a href="#The-0-1-Knapsack-Problem" class="headerlink" title="The 0&#x2F;1 Knapsack Problem"></a>The 0&#x2F;1 Knapsack Problem<a name="01-knapsack-problem"></a></h3><p>Given items with weight array weights and value array values, and a knapsack with capacity capacity, find the maximum value that can be carried.<br>Solving the 0&#x2F;1 Knapsack Problem helps businesses decide which projects to fund within a budget, maximizing profit without overspending. It is also used in logistics to optimize the loading of goods into trucks and planes, ensuring the most valuable, or highest prioritized, items are included without exceeding weight limits.</p>
<p><u>Rules</u>:<br>    - Every item has a weight and value.<br>    - Your knapsack has a weight limit.<br>    - Choose which items you want to bring with you in the knapsack.<br>You can either take an item or not, you cannot take half of an item for example.<br><u>Goal</u>:<br>    - Maximize the total value of the items in the knapsack.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public int Knapsack01(int[] w, int[] v, int cap)</span><br><span class="line">&#123;</span><br><span class="line">    int n = w.Length;</span><br><span class="line">    int[,] dp = new int[n + 1,cap + 1]; </span><br><span class="line">    for (int j = 0; j &lt;= cap; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        dp[0, j] = 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for (int i = 0; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dp[i, 0] = 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for(int i= 1; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        for(int j =1;j&lt;= cap; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            if (j &lt; w[i-1])</span><br><span class="line">            &#123;</span><br><span class="line">                dp[i, j] = dp[i - 1, j];</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                dp[i, j] = Math.Max(dp[i - 1, j], v[i - 1] + dp[i - 1, j - w[i - 1]]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return dp[n, cap];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Below is the optimized version, we use a one-dimensional array dp. By updating the dp array in reverse order, we ensure that each item is considered only once, thus avoiding redundant calculations and overwriting problems.</p>
<ul>
<li>Reduces space complexity from O(n×capacity) to O(capacity)</li>
<li>Reverse iteration prevents value overwrite issues</li>
<li>More efficient memory usage</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public int Knapsack01(int[] w, int[] v, int cap)</span><br><span class="line">&#123;</span><br><span class="line">    int n = w.Length;</span><br><span class="line">    int[] dp = new int[cap + 1];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    for (int i = 0; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        //In order to select the item only once, we need to traverse from back to front </span><br><span class="line">        for (int j = cap; j &gt;= w[i]; j--)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[j] = Math.Max(dp[j], v[i] + dp[j - w[i]]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return dp[cap];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion "></a>Conclusion <a name="conclusion"></a></h2><p>Dynamic programming transforms inefficient recursive solutions into efficient ones by leveraging memory. Whether you choose memoization or tabulation, the key is to avoid redundant work. Arrays or dictionaries are perfect for storing intermediate results, making DP both practical and elegant.By reasonably defining the state, deriving the state-transition equation, and initializing the boundary conditions, we can efficiently solve complex problems using dynamic programming. In practical applications, pay attention to techniques such as space optimization to improve the efficiency and performance of the algorithm.</p>
<link rel="stylesheet" href="/css/folder.css" type="text/css"><script src="/js/folder.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Data Structure and Alogrithm</category>
      </categories>
      <tags>
        <tag>Data Structure and Alogrithm</tag>
      </tags>
  </entry>
  <entry>
    <title>Hash Table</title>
    <url>/2025/04/05/Hash-Table/</url>
    <content><![CDATA[<ol>
<li><a href="#introduction">What is Hash Table</a> <ul>
<li><a href="#core">Core Concepts</a></li>
<li><a href="#common">Common operations of hash table</a></li>
</ul>
</li>
<li><a href="#hc">Hash Collision</a><ul>
<li><a href="#sc">Separate Chaining</a></li>
<li><a href="#oa">Open Addressing</a></li>
</ul>
</li>
<li><a href="#ha">Hash Alogrithm</a><ul>
<li><a href="#goal">Goals of hash algorithms</a></li>
<li><a href="#cha">Common hash algorithms</a></li>
</ul>
</li>
<li><a href="#pa">Practical Examples</a><ul>
<li><a href="#fs">four sum</a><span id="more"></span></li>
</ul>
</li>
</ol>
<h2 id="What-is-Hash-Table"><a href="#What-is-Hash-Table" class="headerlink" title="What is Hash Table?"></a>What is Hash Table?<a name="introduction"></a></h2><p>A <strong><a href="https://en.wikipedia.org/wiki/Hash_table">Hash Table</a></strong> is a high-efficiency data structure that stores key-value pairs.It uses a hash function to map keys to storage locations, achieving average <strong>O(1)</strong> time complexity for <strong>fast insertions, lookups, and deletions</strong>.The index functions as a storage location for the matching value. In simple words, it maps the keys with the value.Widely used in caching systems, database indexing, and compiler symbol tables.<br><img src="/2025/04/05/Hash-Table/hs01.png" alt="pic"></p>
<h3 id="Core-Concepts"><a href="#Core-Concepts" class="headerlink" title="Core Concepts"></a>Core Concepts<a name="core"></a></h3><ul>
<li><strong>Key</strong>: A unique identifier for the data.</li>
<li><strong>Value</strong>: The data associated with the key (simplified to just storing keys in this example).</li>
<li><strong>Bucket</strong>: A storage unit in the hash table (typically an array).</li>
<li><strong>Hash Functions:</strong><br>A hash function converts a key into an index for the underlying array:<ul>
<li>Deterministic: Same key always produces the same index.</li>
<li>Efficient: Computed quickly to avoid performance bottlenecks.</li>
<li>Uniform: Distributes keys evenly to minimize collisions.</li>
</ul>
</li>
<li><strong>Handling Hash Collisions:</strong><br>When two different keys produce the same index, a collision occurs. Common solutions include:<ul>
<li><strong>Seperate Chaining</strong>: Store conflicting elements in a linked list at the same index.</li>
<li><strong>Open Addressing</strong>: Find the next available slot in the array.</li>
</ul>
</li>
</ul>
<p>In addition to hash tables, arrays and linked lists can also be used to implement query functionality, but the time complexity is different. </p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center"><strong>Array</strong></th>
<th align="center"><strong>Linked List</strong></th>
<th align="center"><strong>Hash Table</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center">Search</td>
<td align="center">O(n)</td>
<td align="center">O(n)</td>
<td align="center">O(1)</td>
</tr>
<tr>
<td align="center">Insert</td>
<td align="center">O(1)</td>
<td align="center">O(1)</td>
<td align="center">O(1)</td>
</tr>
<tr>
<td align="center">Delete</td>
<td align="center">O(n)</td>
<td align="center">O(n)</td>
<td align="center">O(1)</td>
</tr>
</tbody></table>
<p>Per aboved comparison, <strong>the time complexity for operations (insertion, deletion, searching, and modification) in a hash table is O(1)</strong>, which is highly efficient.</p>
<h3 id="Common-operations-of-hash-table"><a href="#Common-operations-of-hash-table" class="headerlink" title="Common operations of hash table"></a>Common operations of hash table<a name="common"></a></h3><p>Common operations of a hash table include: initialization, querying, adding key-value pairs, and deleting key-value pairs. Here is an example code:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* Initialize hash table */</span><br><span class="line">Dictionary&lt;int, string&gt; map = new() &#123;</span><br><span class="line">    /* Add operation */</span><br><span class="line">    // Add key-value pair (key, value) to hash table</span><br><span class="line">    &#123; 13835, &quot;Tom&quot; &#125;,</span><br><span class="line">    &#123; 16937, &quot;Jerry&quot; &#125;,</span><br><span class="line">    &#123; 16852, &quot;Steve&quot; &#125;,</span><br><span class="line">    &#123; 13200, &quot;James&quot; &#125;,</span><br><span class="line">    &#123; 14583, &quot;Lisa&quot; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">/* Query operation */</span><br><span class="line">// Input key into hash table, get value</span><br><span class="line">string name = map[16937];</span><br><span class="line"></span><br><span class="line">/* Delete operation */</span><br><span class="line">// Delete key-value pair (key, value) from hash table</span><br><span class="line">map.Remove(14583);</span><br></pre></td></tr></table></figure>
<p>There are three common ways to traverse a hash table: traversing key-value pairs, traversing keys, and traversing values. Here is an example code:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* Traverse hash table */</span><br><span class="line">// Traverse key-value pairs Key-&gt;Value</span><br><span class="line">foreach (var kv in map) &#123;</span><br><span class="line">    Console.WriteLine(kv.Key + &quot; -&gt; &quot; + kv.Value);</span><br><span class="line">&#125;</span><br><span class="line">// Traverse keys only</span><br><span class="line">foreach (int key in map.Keys) &#123;</span><br><span class="line">    Console.WriteLine(key);</span><br><span class="line">&#125;</span><br><span class="line">// Traverse values only</span><br><span class="line">foreach (string val in map.Values) &#123;</span><br><span class="line">    Console.WriteLine(val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Hash-Collision"><a href="#Hash-Collision" class="headerlink" title="Hash Collision"></a>Hash Collision<a name="hc"></a></h2><p>The hashing process generates a small number for a big key, so there is a possibility that two keys could produce the same value. The situation where the newly inserted key maps to an already occupied, and it must be handled using some collision handling technology.<br><img src="/2025/04/05/Hash-Table/hs02.png" alt="pic"></p>
<p>There are mainly two methods to handle collision:</p>
<ul>
<li>Separate Chaining</li>
<li>Open Addressing</li>
</ul>
<h3 id="Separate-Chaining"><a href="#Separate-Chaining" class="headerlink" title="Separate Chaining "></a>Separate Chaining <a name="sc"></a></h3><p>Separate chaining converts a single element into a linked list, treating key-value pairs as list nodes, storing all colliding key-value pairs in the same linked list.<br>The operations of a hash table implemented with separate chaining have changed as follows:</p>
<ul>
<li>Searching Elements: Input key, obtain the bucket index through the hash function, then access the head node of the linked list. Traverse the linked list and compare key to find the target key-value pair.</li>
<li>Inserting Elements: Access the head node of the linked list via the hash function, then append the node (key-value pair) to the list.</li>
<li>Deleting Elements: Access the head of the linked list based on the result of the hash function, then traverse the linked list to find the target node and delete it.<br><img src="/2025/04/05/Hash-Table/hs03.png" alt="pic"></li>
</ul>
<p>The code below provides a simple implementation of a separate chaining hash table, with two things to note:</p>
<ul>
<li>Lists (dynamic arrays) are used instead of linked lists for simplicity. In this setup, the hash table (array) contains multiple buckets, each of which is a list.</li>
<li>This implementation includes a hash table resizing method. When the load factor exceeds <strong>0.7</strong>, we expand the hash table to twice its original size.<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Hash</span></span><br><span class="line">&#123;</span><br><span class="line">      <span class="built_in">int</span> BUCKET;</span><br><span class="line">      List&lt;<span class="built_in">int</span>&gt;[] table;</span><br><span class="line">      <span class="built_in">int</span> elementCount;</span><br><span class="line">      <span class="keyword">const</span> <span class="built_in">double</span> LOAD_FACTOR_THRESHOLD = <span class="number">0.7</span>;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="title">Hash</span>(<span class="params"><span class="built_in">int</span> V</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">this</span>.BUCKET = V;</span><br><span class="line">          table = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;[BUCKET];</span><br><span class="line">          elementCount = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; BUCKET; i++)</span><br><span class="line">              table[i] = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Hash function to map values to key</span></span><br><span class="line">      <span class="function"><span class="keyword">private</span> <span class="built_in">int</span> <span class="title">hashFunction</span>(<span class="params"><span class="built_in">int</span> x</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">          <span class="built_in">int</span> hash = x.GetHashCode();</span><br><span class="line">          <span class="keyword">return</span> (hash % BUCKET + BUCKET) % BUCKET;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="built_in">double</span> <span class="title">GetLoadFactor</span>()</span></span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">return</span> (<span class="built_in">double</span>)elementCount / BUCKET;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">Rehash</span>()</span></span><br><span class="line">      &#123;</span><br><span class="line">          <span class="built_in">int</span> oldBucket = BUCKET; <span class="comment">// old bucket</span></span><br><span class="line">          <span class="built_in">int</span> newBucket = oldBucket * <span class="number">2</span>; <span class="comment">// new bucket</span></span><br><span class="line">          List&lt;<span class="built_in">int</span>&gt;[] newTable = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;[newBucket];</span><br><span class="line">          <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; newBucket; i++)</span><br><span class="line">          &#123;</span><br><span class="line">              newTable[i] = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>;i&lt; oldBucket; i++)</span><br><span class="line">          &#123;</span><br><span class="line">              <span class="keyword">foreach</span>(<span class="built_in">int</span> key <span class="keyword">in</span> table[i])</span><br><span class="line">              &#123;</span><br><span class="line">                  <span class="built_in">int</span> newIndex = key%newBucket;</span><br><span class="line"></span><br><span class="line">                  <span class="keyword">if</span> (!newTable[newIndex].Contains(key))</span><br><span class="line">                  &#123;</span><br><span class="line">                      newTable[newIndex].Add(key);</span><br><span class="line">                  &#125;</span><br><span class="line">                  </span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          table = newTable;</span><br><span class="line">          BUCKET = newBucket;</span><br><span class="line">          Console.WriteLine(<span class="string">$&quot;Rehashed to <span class="subst">&#123;newBucket&#125;</span> buckets&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">Contains</span>(<span class="params"><span class="built_in">int</span> key</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">          <span class="built_in">int</span> index = hashFunction(key);</span><br><span class="line">          <span class="keyword">return</span> table[index].Contains(key);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertItem</span>(<span class="params"><span class="built_in">int</span> key</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">if</span> (Contains(key))</span><br><span class="line">          &#123;</span><br><span class="line">              Console.WriteLine(<span class="string">$&quot;Key <span class="subst">&#123;key&#125;</span> already exists&quot;</span>);</span><br><span class="line">              <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="built_in">int</span> index = hashFunction(key);</span><br><span class="line">          table[index].Add(key);</span><br><span class="line"></span><br><span class="line">          elementCount++;</span><br><span class="line">          <span class="keyword">if</span>(GetLoadFactor()&gt; LOAD_FACTOR_THRESHOLD)</span><br><span class="line">          &#123;</span><br><span class="line">              Rehash();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Deletes a key from the hash table</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteItem</span>(<span class="params"><span class="built_in">int</span> key</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">          <span class="built_in">int</span> index = hashFunction(key);</span><br><span class="line">          table[index].Remove(key);</span><br><span class="line">          elementCount--;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">displayHash</span>()</span></span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; BUCKET; i++)</span><br><span class="line">          &#123;</span><br><span class="line">              Console.Write(i + <span class="string">&quot; --&gt; &quot;</span>);</span><br><span class="line">              <span class="keyword">foreach</span> (<span class="built_in">int</span> x <span class="keyword">in</span> table[i])</span><br><span class="line">                  Console.Write(x + <span class="string">&quot; &quot;</span>);</span><br><span class="line">              Console.WriteLine();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2025/04/05/Hash-Table/hs04.png" alt="pic"></li>
</ul>
<p>It is worth noting that when the linked list is very long, the query efficiency<br>is poor. In this case, the list can be converted to an <strong>“AVL tree”</strong> or <strong>“Red-Black tree”</strong> to optimize the time complexity of the query operation to <strong>O(log n)</strong>.</p>
<h3 id="Open-Addressing"><a href="#Open-Addressing" class="headerlink" title="Open Addressing "></a>Open Addressing <a name="oa"></a></h3><p>In open addressing, all elements are stored in the hash table itself. Each table entry contains either a record or NIL. When searching for an element, we examine the table slots one by one until the desired element is found or it is clear that the element is not in the table.</p>
<p>Probe Strategies:</p>
<ul>
<li><strong>Linear Probing:</strong><br>In linear probing, the hash table is searched sequentially that starts from the original location of the hash. If in case the location that we get is already occupied, then we check for the next location.</li>
<li><strong>Quadratic Probing</strong>: Search with step size i^2.</li>
<li><strong>Double Hashing</strong>: Use a second hash function to calculate the step size.</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">OpenAddressingHash</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> BUCKET;             <span class="comment">// Number of buckets</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span>?[] table;           <span class="comment">// Storage for keys, null indicates empty</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OpenAddressingHash</span>(<span class="params"><span class="built_in">int</span> V</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.BUCKET = V;</span><br><span class="line">        table = <span class="keyword">new</span> <span class="built_in">int</span>?[BUCKET]; <span class="comment">// Initialize as empty</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Hash function: Modulo operation</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="built_in">int</span> <span class="title">hashFunction</span>(<span class="params"><span class="built_in">int</span> x</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (x % BUCKET);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Insert item</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">insertItem</span>(<span class="params"><span class="built_in">int</span> key</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isFull()) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// Hash table is full</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> index = hashFunction(key);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Linear probing</span></span><br><span class="line">        <span class="built_in">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (table[(index + i) % BUCKET] != <span class="literal">null</span>) &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        table[(index + i) % BUCKET] = key;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Search item</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">searchItem</span>(<span class="params"><span class="built_in">int</span> key</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span> index = hashFunction(key);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (table[(index + i) % BUCKET] != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (table[(index + i) % BUCKET] == key)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Delete item</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">deleteItem</span>(<span class="params"><span class="built_in">int</span> key</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span> index = hashFunction(key);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (table[(index + i) % BUCKET] != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (table[(index + i) % BUCKET] == key) &#123;</span><br><span class="line">                table[(index + i) % BUCKET] = <span class="literal">null</span>; <span class="comment">// Mark as empty</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check if hash table is full</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="built_in">bool</span> <span class="title">isFull</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> table) &#123;</span><br><span class="line">            <span class="keyword">if</span> (item == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Display hash table</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">displayHash</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; BUCKET; i++) &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;i&#125;</span> --&gt; <span class="subst">&#123;table[i]&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Hash-Alogrithm"><a href="#Hash-Alogrithm" class="headerlink" title="Hash Alogrithm"></a>Hash Alogrithm<a name="ha"></a></h2><h3 id="Goals-of-hash-algorithms"><a href="#Goals-of-hash-algorithms" class="headerlink" title="Goals of hash algorithms"></a>Goals of hash algorithms<a name="goal"></a></h3><p>To achieve a fast and stable hash table data structure, hash algorithms should have the following characteristics:</p>
<ul>
<li><strong>Determinism</strong>: For the same input, the hash algorithm should always produce the same output. Only then can the hash table be reliable.</li>
<li><strong>High efficiency</strong>: The process of computing the hash value should be fast enough. The smaller the computational overhead, the more practical the hash table.</li>
<li><strong>Uniform distribution</strong>: The hash algorithm should ensure that key-value pairs are evenly distributed in the hash table. The more uniform the distribution, the lower the probability of hash collisions.</li>
</ul>
<p>Your company might use a hashing algorithm for:</p>
<ul>
<li><strong>Password storage</strong>. You must keep records of all of the username&#x2F;password combinations people use to access your resources. But if a hacker gains entry, stealing unprotected data is easy. Hashing ensures that the data is stored in a scrambled state, so it is harder to steal.</li>
<li><strong>Digital signatures</strong>. A tiny bit of data proves that a note wasn’t modified from the time it leaves a user’s outbox and reaches your inbox.</li>
<li><strong>Document management</strong>. Hashing algorithms can be used to authenticate data. The writer uses a hash to secure the document when it’s complete. The hash works a bit like a seal of approval.<br>A recipient can generate a hash and compare it to the original. If the two are equal, the data is considered genuine. If they don’t match, the document has been changed.</li>
</ul>
<h3 id="Common-hash-algorithms"><a href="#Common-hash-algorithms" class="headerlink" title="Common hash algorithms"></a>Common hash algorithms<a name="cha"></a></h3><p>Over the past century, hash algorithms have been in a continuous process of upgrading and optimization. Some researchers strive to improve the performance of hash algorithms, while others, including hackers, are dedicated to finding security issues in hash algorithms.</p>
<ul>
<li><strong>MD5</strong> and <strong>SHA-1</strong> have been successfully attacked multiple times and are thus abandoned in various security applications.</li>
<li><strong>SHA-2</strong> series, especially SHA-256, is one of the most secure hash algorithms to date, with no successful attacks reported, hence commonly used in various security applications and protocols.</li>
<li><strong>SHA-3</strong> has lower implementation costs and higher computational efficiency compared to SHA-2, but its current usage coverage is not as extensive as the SHA-2 series.</li>
</ul>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center"><strong>MD5</strong></th>
<th align="center"><strong>SHA-1</strong></th>
<th align="center"><strong>SHA-2</strong></th>
<th align="center"><strong>SHA-3</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center">Release Year</td>
<td align="center">1992</td>
<td align="center">1995</td>
<td align="center">2002</td>
<td align="center">2008</td>
</tr>
<tr>
<td align="center">Output Length</td>
<td align="center">O(1)</td>
<td align="center">O(1)</td>
<td align="center">O(1)</td>
<td align="center">224&#x2F;256&#x2F;384&#x2F;512 bit</td>
</tr>
<tr>
<td align="center">Hash Collisions</td>
<td align="center">Frequent</td>
<td align="center">Frequent</td>
<td align="center">Rare</td>
<td align="center">Rare</td>
</tr>
<tr>
<td align="center">Security Level</td>
<td align="center">Low, has been successfully attacked</td>
<td align="center">Low, has been successfully attacked</td>
<td align="center">High</td>
<td align="center">High</td>
</tr>
<tr>
<td align="center">Applications</td>
<td align="center">Abandoned, still used for data integrity checks</td>
<td align="center">Abandoned</td>
<td align="center">Cryptocurrency transaction verification, digital signatures, etc.</td>
<td align="center">Can be used to replace SHA-2</td>
</tr>
</tbody></table>
<h3 id="Four-Sum"><a href="#Four-Sum" class="headerlink" title="Four Sum "></a>Four Sum <a name="fs"></a></h3><p>Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:</p>
<ul>
<li>0 &lt;&#x3D; i, j, k, l &lt; n</li>
<li>nums1[i] + nums2[j] + nums3[k] + nums4[l] &#x3D;&#x3D; 0<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">FourSumCount</span>(<span class="params"><span class="built_in">int</span>[] nums1, <span class="built_in">int</span>[] nums2, <span class="built_in">int</span>[] nums3, <span class="built_in">int</span>[] nums4</span>)</span> &#123;</span><br><span class="line">       Dictionary&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt; dic = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;();</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="keyword">var</span> i <span class="keyword">in</span> nums1)&#123;</span><br><span class="line">            <span class="keyword">foreach</span>(<span class="keyword">var</span> j <span class="keyword">in</span> nums2)&#123;</span><br><span class="line">                <span class="built_in">int</span> sum = i + j;</span><br><span class="line">                <span class="keyword">if</span>(dic.ContainsKey(sum))&#123;</span><br><span class="line">                    dic[sum]++;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    dic.Add(sum, <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">int</span> res = <span class="number">0</span>;</span><br><span class="line">         <span class="keyword">foreach</span>(<span class="keyword">var</span> a <span class="keyword">in</span> nums3)&#123;</span><br><span class="line">            <span class="keyword">foreach</span>(<span class="keyword">var</span> b <span class="keyword">in</span> nums4)&#123;</span><br><span class="line">                <span class="built_in">int</span> sum = a+b;</span><br><span class="line">                <span class="keyword">if</span>(dic.TryGetValue(-sum, <span class="keyword">out</span> <span class="keyword">var</span> result))&#123;</span><br><span class="line">                    res += result;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<link rel="stylesheet" href="/css/folder.css" type="text/css"><script src="/js/folder.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Data Structure and Alogrithm</category>
      </categories>
      <tags>
        <tag>Data Structure and Alogrithm</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Blog Multi-Device Synchronization and Management Guide Based on Git Branch Strategy</title>
    <url>/2025/05/03/Hexo-Blog-Multi-Device-Synchronization-and-Management-Guide-Based-on-Git-Branch-Strategy/</url>
    <content><![CDATA[<ul>
<li><a href="#introduction-the-necessity">Introduction: The Necessity of Multi-Device Collaboration</a></li>
<li><a href="#core-principles-of-hexo">Core Principles of Hexo Multi-Device Synchronization</a><ul>
<li><a href="#hexo-directory">Hexo Directory Structure and Version Control Strategy</a></li>
<li><a href="#git-branch">Git Branch Division of Labor Model</a></li>
</ul>
</li>
<li><a href="#old-computer-operation">Old Computer Operation Guide: Building Remote Synchronization Foundation</a><ul>
<li><a href="#creating-and-configuring-remote-branches">Creating and Configuring Remote Branches</a></li>
<li><a href="#local-environment">Local Environment and Remote Repository Synchronization</a></li>
<li><a href="#gitignore-key-configuration">.gitignore Key Configuration</a></li>
</ul>
</li>
<li><a href="#new-computer-environment">New Computer Environment Setup: Restoring Blog from Remote Repository</a><ul>
<li><a href="#ssh-key-configuration">SSH Key Configuration and Environment Dependency Installation</a></li>
<li><a href="#remote-repository">Remote Repository Cloning and Dependency Recovery</a></li>
<li><a href="#first-run-verification">First Run Verification and Configuration Check</a></li>
</ul>
</li>
<li><a href="#daily-update-workflow">Daily Update Workflow: Dual Branch Collaborative Operation</a><ul>
<li><a href="#source-code">Source Code Update and Submission Process</a></li>
<li><a href="#static-file">Static File Deployment and Branch Synchronization</a></li>
<li><a href="#automation-script">Automation Script to Optimize Workflow</a></li>
</ul>
</li>
<li><a href="#common-problems">Common Problems and Solutions</a><ul>
<li><a href="#branch-switching">Branch Switching Conflict Handling</a></li>
<li><a href="#environment-dependency">Environment Dependency Inconsistency Issue</a></li>
<li><a href="#theme-and-pluginy">Theme and Plugin Synchronization Abnormality</a></li>
</ul>
</li>
<li><a href="#advanced-tips-private">Advanced Tips: Private Repositories and Multi-Branch Strategies</a><ul>
<li><a href="#private-repositories">Private Repositories to Protect Source Code Security</a></li>
<li><a href="#multi-branch-collaborative-development-model">Multi-Branch Collaborative Development Model</a></li>
</ul>
</li>
<li><a href="#conclusion-best-practices">Conclusion: Best Practices for Multi-Device Synchronization</a><span id="more"></span></li>
</ul>
<h2 id="Introduction-The-Necessity-of-Multi-Device-Collaboration"><a href="#Introduction-The-Necessity-of-Multi-Device-Collaboration" class="headerlink" title="Introduction:The Necessity of Multi-Device Collaboration"></a>Introduction:The Necessity of Multi-Device Collaboration<a name="introduction-the-necessity"></a></h2><p>A couple of days ago, I am thinking if I can update blogs using multiple devices (such as home computers, office computers, laptops) which has become the norm from my perspective.As an efficient static blog generator,Hexo’s default deployment mechanism only pushes static files to GitHub Pages, but source code files (Markdown articles, theme configurations, plugins) are not synchronized, leading to the following pain points in multi-device collaboration:</p>
<ul>
<li>Scattered storage of source code, unable to manage uniformly</li>
<li>Repeated construction of environment configurations, low efficiency</li>
<li>Sudden situations (such as computer failure) leading to source code loss</li>
</ul>
<p>So I write this to build a complete Hexo multi-device synchronization solution through Git branch strategies,achieving seamless synchronization and management of source code across devices.</p>
<h2 id="Core-Principles-of-Hexo-Multi-Device-Synchronization"><a href="#Core-Principles-of-Hexo-Multi-Device-Synchronization" class="headerlink" title="Core Principles of Hexo Multi-Device Synchronization"></a>Core Principles of Hexo Multi-Device Synchronization<a name="core-principles-of-hexo"></a></h2><h3 id="Hexo-Directory-Structure-and-Version-Control-Strategy"><a href="#Hexo-Directory-Structure-and-Version-Control-Strategy" class="headerlink" title="Hexo Directory Structure and Version Control Strategy"></a>Hexo Directory Structure and Version Control Strategy<a name="hexo-directory"></a></h3><p>In the Hexo blog directory structure, the following <code>files/directories</code> require special attention:</p>
<table>
<thead>
<tr>
<th>Directory&#x2F;File</th>
<th>Function</th>
<th>Version Control Strategy</th>
</tr>
</thead>
<tbody><tr>
<td><code>node_modules/</code></td>
<td>Dependency package directory</td>
<td>Ignored (regenerated via <code>package.json</code>)</td>
</tr>
<tr>
<td><code>themes/</code></td>
<td>Theme files</td>
<td>Must be synchronized (contains custom configurations)</td>
</tr>
<tr>
<td><code>public/</code></td>
<td>Static generated files</td>
<td>Ignored (generated by <code>hexo g</code>)</td>
</tr>
<tr>
<td><code>source/</code></td>
<td>Blog source code(Markdown)</td>
<td>Must be synchronized</td>
</tr>
<tr>
<td><code>_config.yml</code></td>
<td>Global configuration file</td>
<td>Must be synchronized</td>
</tr>
<tr>
<td><code>package.json</code></td>
<td>Dependency description file</td>
<td>Must be synchronized</td>
</tr>
</tbody></table>
<h3 id="Git-Branch-Division-of-Labor-Model"><a href="#Git-Branch-Division-of-Labor-Model" class="headerlink" title="Git Branch Division of Labor Model"></a>Git Branch Division of Labor Model<a name="git-branch"></a></h3><p>A dual-branch strategy is higly recommended:</p>
<ul>
<li><strong>Source branch (e.g., <code>hexo01</code> or <code>source</code>)</strong>: Stores Hexo source code (Markdown, themes, configurations)</li>
<li><strong>Deployment branch (e.g., <code>master</code> or <code>gh-pages</code>)</strong>: Stores static generated files (automatically pushed by <code>hexo deploy</code>)</li>
</ul>
<h4 id="Core-logic"><a href="#Core-logic" class="headerlink" title="Core logic:"></a>Core logic:</h4><ol>
<li>The source branch serves as the “development branch” where all manual modifications are completed.</li>
<li>The deployment branch serves as the “production branch” only receiving static generated files. When pushing to the “development branch” using <code>git push origin hexo01</code>, the “production branch” will be automatically synchronized.</li>
<li>The two branches are isolated through <code>.gitignore</code> configuration.</li>
</ol>
<h2 id="Old-Computer-Operation-Guide"><a href="#Old-Computer-Operation-Guide" class="headerlink" title="Old Computer Operation Guide:"></a>Old Computer Operation Guide:</h2><h3 id="Creating-and-Configuring-Remote-Branches"><a href="#Creating-and-Configuring-Remote-Branches" class="headerlink" title="Creating and Configuring Remote Branches"></a>Creating and Configuring Remote Branches<a name="creating-and-configuring-remote-branches"></a></h3><ol>
<li><strong>Remote repository preparation</strong><br>Create a repository <code>username.github.io</code> on GitHub and execute the following operations:<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Create hexo source branch</span></span><br><span class="line">git branch hexo</span><br><span class="line"><span class="comment"># Set hexo as the default branch, this is a key step!</span></span><br><span class="line">git branch --set-upstream-to=origin/hexo hexo</span><br></pre></td></tr></table></figure></li>
<li><strong>Local environment initialization</strong><br>  Execute in the blog root directory:<br>  Initialize Git repository<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line"><span class="comment"># Add remote repository</span></span><br><span class="line">git remote add origin git@github.com:username/username.github.io.git</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="Local-Environment-and-Remote-Repository-Synchronization"><a href="#Local-Environment-and-Remote-Repository-Synchronization" class="headerlink" title="Local Environment and Remote Repository Synchronization"></a>Local Environment and Remote Repository Synchronization<a name="local-environmen"></a></h3><ol>
<li>Clean and copy files<br>Retain the <strong>.git</strong> folder and delete other files<br>Copy the original Hexo directory (except .deploy_git&#x2F;) to the current directory<br>Commit source code to the remote branch<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Add all files</span></span><br><span class="line">git add .</span><br><span class="line"><span class="comment"># Commit changes</span></span><br><span class="line">git commit -m <span class="string">&quot;Init hexo source branch&quot;</span></span><br><span class="line"><span class="comment"># Push to the remote hexo branch</span></span><br><span class="line">git push origin hexo</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="gitignore-Key-Configuration"><a href="#gitignore-Key-Configuration" class="headerlink" title=".gitignore Key Configuration "></a>.gitignore Key Configuration <a name="gitignore-key-configuratio"></a></h3><p>Create <strong>.gitignore</strong> file in the project root directory with the following content:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br></pre></td></tr></table></figure>
<h2 id="New-Computer-Environment-Setup"><a href="#New-Computer-Environment-Setup" class="headerlink" title="New Computer Environment Setup "></a>New Computer Environment Setup <a name="new-computer-environment"></a></h2><h3 id="SSH-Key-Configuration-and-Environment-Dependency-Installation"><a href="#SSH-Key-Configuration-and-Environment-Dependency-Installation" class="headerlink" title="SSH Key Configuration and Environment Dependency Installation "></a>SSH Key Configuration and Environment Dependency Installation <a name="ssh-key-configuratio"></a></h3><ol>
<li>Generate and add SSH key<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;your_email@example.com&quot;</span></span><br></pre></td></tr></table></figure></li>
<li>Add the generated public key like <strong>id_rsa.pub</strong> to <code>GitHub&#39;s Settings &gt; SSH and GPG Keys</code>, mac is under <code>~/.ssh</code> and windows is under <code>C:\Users\username\.ssh</code></li>
<li>Configure Git global information<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;YourName&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;your_email@example.com&quot;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="Remote-Repository-Cloning-and-Dependency-Recovery"><a href="#Remote-Repository-Cloning-and-Dependency-Recovery" class="headerlink" title="Remote Repository Cloning and Dependency Recovery "></a>Remote Repository Cloning and Dependency Recovery <a name="remote-repository"></a></h3><ol>
<li>Clone the source branch<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b hexo git@github.com:username/username.github.io.git blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br></pre></td></tr></table></figure>
2.Install dependencies<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Install Hexo CLI</span></span><br><span class="line">npm install -g hexo-cli</span><br><span class="line"><span class="comment"># Install project dependencies</span></span><br><span class="line">npm install</span><br><span class="line"><span class="comment"># Install deployment plugins</span></span><br><span class="line">npm install hexo-deployer-git</span><br></pre></td></tr></table></figure>
<strong>Note</strong>:make sure you use the same version of (Node.js)[<a href="https://nodejs.org/en/download]">https://nodejs.org/en/download]</a> to install the tools above otherwise there may be some compatibility problems.</li>
</ol>
<h3 id="First-Run-Verification-and-Configuration-Check"><a href="#First-Run-Verification-and-Configuration-Check" class="headerlink" title="First Run Verification and Configuration Check "></a>First Run Verification and Configuration Check <a name="first-run-verification"></a></h3><p>Local preview verification</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure>
<p>Access <a href="http://localhost:4000/">http://localhost:4000</a> to confirm the blog runs normally<br>Deployment configuration check<br>Ensure the deployment configuration in <code>_config.yml</code> points to the <code>master</code> branch:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:username/username.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
<h2 id="Daily-Update-Workflow-Dual-Branch-Collaborative-Operation"><a href="#Daily-Update-Workflow-Dual-Branch-Collaborative-Operation" class="headerlink" title="Daily Update Workflow: Dual Branch Collaborative Operation "></a>Daily Update Workflow: Dual Branch Collaborative Operation <a name="daily-update-workflow"></a></h2><h3 id="Source-Code-Update-and-Submission-Process"><a href="#Source-Code-Update-and-Submission-Process" class="headerlink" title="Source Code Update and Submission Process "></a>Source Code Update and Submission Process <a name="source-cod"></a></h3><ol>
<li>Pull the latest source code<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull origin hexo</span><br></pre></td></tr></table></figure></li>
<li>Modify and commit<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Add a new article</span></span><br><span class="line">hexo new <span class="string">&quot;New Article&quot;</span></span><br><span class="line"><span class="comment"># Commit changes</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;Update blog content&quot;</span></span><br><span class="line"><span class="comment"># Push to the remote source branch</span></span><br><span class="line">git push origin hexo</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="Automation-Script-to-Optimize-Workflow"><a href="#Automation-Script-to-Optimize-Workflow" class="headerlink" title="Automation Script to Optimize Workflow "></a>Automation Script to Optimize Workflow <a name="automation-script"></a></h3><p>Create a <code>deploy.sh</code> script to simplify the process:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># ================ Hexo Automated Deployment Script (hexo01 branch) ================</span></span><br><span class="line"><span class="comment"># Usage: Execute in the blog root directory with ./deploy.sh &quot;Commit message&quot;</span></span><br><span class="line"><span class="comment"># If no commit message is provided, a default timestamp message will be used</span></span><br><span class="line"><span class="comment"># ================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Define color output</span></span><br><span class="line">COLOR_RED=<span class="string">&quot;\033[31m&quot;</span></span><br><span class="line">COLOR_GREEN=<span class="string">&quot;\033[32m&quot;</span></span><br><span class="line">COLOR_YELLOW=<span class="string">&quot;\033[33m&quot;</span></span><br><span class="line">COLOR_RESET=<span class="string">&quot;\033[0m&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Check if commit message is provided, otherwise use default</span></span><br><span class="line">COMMIT_MSG=<span class="variable">$&#123;1:-&quot;Auto deploy at $(date +&#x27;%Y-%m-%d %H:%M:%S&#x27;)&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$&#123;COLOR_YELLOW&#125;</span>==== Starting Hexo Blog Deployment ====<span class="variable">$&#123;COLOR_RESET&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 0: Pull latest source code (hexo01 branch)</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$&#123;COLOR_GREEN&#125;</span>[0/4] Pulling latest source code...<span class="variable">$&#123;COLOR_RESET&#125;</span>&quot;</span></span><br><span class="line">git pull origin hexo01</span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$&#123;COLOR_RED&#125;</span>Failed to pull source code! Please resolve conflicts manually and retry.<span class="variable">$&#123;COLOR_RESET&#125;</span>&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 1: Clean and generate static files</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$&#123;COLOR_GREEN&#125;</span>[1/4] Cleaning and generating static files...<span class="variable">$&#123;COLOR_RESET&#125;</span>&quot;</span></span><br><span class="line">hexo clean &amp;&amp; hexo generate</span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$&#123;COLOR_RED&#125;</span>Failed to generate static files!<span class="variable">$&#123;COLOR_RESET&#125;</span>&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># Step 2: Deploy to GitHub Pages</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$&#123;COLOR_GREEN&#125;</span>[2/4] Deploying to GitHub Pages...<span class="variable">$&#123;COLOR_RESET&#125;</span>&quot;</span></span><br><span class="line">hexo deploy</span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$&#123;COLOR_RED&#125;</span>Failed to deploy to GitHub Pages!<span class="variable">$&#123;COLOR_RESET&#125;</span>&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># Step 3: Commit source code changes to hexo01 branch</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$&#123;COLOR_GREEN&#125;</span>[3/4] Committing source code changes...<span class="variable">$&#123;COLOR_RESET&#125;</span>&quot;</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;<span class="variable">$COMMIT_MSG</span>&quot;</span></span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$&#123;COLOR_YELLOW&#125;</span>No changes to commit.<span class="variable">$&#123;COLOR_RESET&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="comment"># Step 4: Push source code to GitHub</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$&#123;COLOR_GREEN&#125;</span>[4/4] Pushing source code to GitHub (hexo01 branch)...<span class="variable">$&#123;COLOR_RESET&#125;</span>&quot;</span></span><br><span class="line">    git push origin hexo01</span><br><span class="line">    <span class="keyword">if</span> [ $? -ne 0 ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$&#123;COLOR_RED&#125;</span>Failed to push source code to GitHub!<span class="variable">$&#123;COLOR_RESET&#125;</span>&quot;</span></span><br><span class="line">        <span class="built_in">exit</span> 1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$&#123;COLOR_YELLOW&#125;</span>==== Hexo Blog Deployment Completed ====<span class="variable">$&#123;COLOR_RESET&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$&#123;COLOR_GREEN&#125;</span>View blog: https://your-username.github.io<span class="variable">$&#123;COLOR_RESET&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$&#123;COLOR_GREEN&#125;</span>View source: https://github.com/your-username/your-repo/tree/hexo01<span class="variable">$&#123;COLOR_RESET&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>
<p>Grant execution permissions and run:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x deploy.sh</span><br><span class="line">./deploy.sh <span class="string">&quot;Update description&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="Common-Problems-and-Solutions"><a href="#Common-Problems-and-Solutions" class="headerlink" title="Common Problems and Solutions "></a>Common Problems and Solutions <a name="automation-script"></a></h2><h3 id="Branch-Switching-Conflict-Handling"><a href="#Branch-Switching-Conflict-Handling" class="headerlink" title="Branch Switching Conflict Handling "></a>Branch Switching Conflict Handling <a name="branch-switchin"></a></h3><p>When switching branches causes node_modules conflicts, execute:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Stash current changes</span></span><br><span class="line">git stash</span><br><span class="line"><span class="comment"># Switch branches</span></span><br><span class="line">git checkout hexo</span><br><span class="line"><span class="comment"># Restore changes</span></span><br><span class="line">git stash pop</span><br><span class="line"><span class="comment"># Clean untracked files</span></span><br><span class="line">git clean -fdx</span><br><span class="line"><span class="comment"># Reinstall dependencies</span></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p>If you can not run hexo command like <code>hexo s</code> on <strong>Mac</strong>,this is because the default terminal on Mac is zsh (which can actually be queried with an echo $SHELL command), and the user environment variable file is~&#x2F;. zshrc. After executing the following command, the environment variable configuration was successful: </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;PATH=&quot;$PATH:./node_modules/.bin&quot;&#x27;</span> &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure>
<h3 id="Environment-Dependency-Inconsistency-Issue"><a href="#Environment-Dependency-Inconsistency-Issue" class="headerlink" title="Environment Dependency Inconsistency Issue "></a>Environment Dependency Inconsistency Issue <a name="environment-dependenc"></a></h3><p>Ensure <code>Node.js</code> versions are consistent across devices, which can be locked via <code>package.json</code>:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;engines&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;node&quot;</span><span class="punctuation">:</span> <span class="string">&quot;14.x&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>On new devices, execute:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --no-save</span><br></pre></td></tr></table></figure>

<h3 id="Theme-and-Plugin-Synchronization-Abnormality"><a href="#Theme-and-Plugin-Synchronization-Abnormality" class="headerlink" title="Theme and Plugin Synchronization Abnormality"></a>Theme and Plugin Synchronization Abnormality<a name="theme-and-pluginy"></a></h3><ol>
<li>Check for nested Git in themes<br>Delete .git folders in theme directories:<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find themes/ -<span class="built_in">type</span> d -name <span class="string">&quot;.git&quot;</span> -<span class="built_in">exec</span> <span class="built_in">rm</span> -rf &#123;&#125; \;</span><br></pre></td></tr></table></figure></li>
<li>Manually synchronize theme updates<br>If the theme is updated, manage it via Git submodule:<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git submodule add &lt;theme-repo&gt; themes/&lt;theme-name&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Advanced-Tips-Private-Repositories-and-Multi-Branch-Strategies"><a href="#Advanced-Tips-Private-Repositories-and-Multi-Branch-Strategies" class="headerlink" title="Advanced Tips: Private Repositories and Multi-Branch Strategies "></a>Advanced Tips: Private Repositories and Multi-Branch Strategies <a name="advanced-tips-private"></a></h2><h3 id="Private-Repositories-to-Protect-Source-Code-Security"><a href="#Private-Repositories-to-Protect-Source-Code-Security" class="headerlink" title="Private Repositories to Protect Source Code Security "></a>Private Repositories to Protect Source Code Security <a name="private-repositories"></a></h3><ol>
<li>Create a private repository<br>Create a new private repository <code>hexo-source</code> on GitHub to store source code</li>
<li>Migrate the source branch<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Remove old remote</span></span><br><span class="line">git remote remove origin</span><br><span class="line"><span class="comment"># Add new private repository</span></span><br><span class="line">git remote add origin git@github.com:username/hexo-source.git</span><br><span class="line"><span class="comment"># Push the source branch</span></span><br><span class="line">git push -u origin hexo</span><br></pre></td></tr></table></figure></li>
<li>Configure dual deployment targets<br>Add to _config.yml:<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">repo:</span> <span class="string">git@github.com:username/hexo-source.git</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">hexo</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">repo:</span> <span class="string">git@github.com:username/username.github.io.git</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="Multi-Branch-Collaborative-Development-Model"><a href="#Multi-Branch-Collaborative-Development-Model" class="headerlink" title="Multi-Branch Collaborative Development Model"></a>Multi-Branch Collaborative Development Model<a name="multi-branch-collaborative-development-model"></a></h3><ol>
<li>Feature branch workflow<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Create a feature branch</span></span><br><span class="line">git checkout -b feature/new-theme</span><br><span class="line"><span class="comment"># After development, merge into the hexo branch</span></span><br><span class="line">git checkout hexo</span><br><span class="line">git merge feature/new-theme</span><br><span class="line">git push origin hexo</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Best-Practices-for-Multi-Device-Synchronization"><a href="#Best-Practices-for-Multi-Device-Synchronization" class="headerlink" title="Best Practices for Multi-Device Synchronization"></a>Best Practices for Multi-Device Synchronization<a name="conclusion-best-practices"></a></h2><ol>
<li>Core principles:<br>- Separate storage of source code and static files<br>- Manage dependencies via package.json<br>- Always pull before committing to avoid conflicts</li>
<li>Operation checklist:<br>- For new devices: <code>git clone -b hexo + npm install</code><br>- Daily updates: <code>git pull</code> → edit → <code>git push</code> → <code>hexo deploy</code>(must need git pull firstly)<br>- Environment migration: Only requires Git cloning + dependency installation, no need for re-initialization</li>
<li>Advanced suggestions:<br>- Use GitHub Actions for automated deployment<br>- Regularly back up source branches to other cloud storages<br>- Adopt branch protection strategies for team collaboration</li>
</ol>
<link rel="stylesheet" href="/css/folder.css" type="text/css"><script src="/js/folder.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Blog</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Git</tag>
        <tag>Multi-Device Synchronization</tag>
      </tags>
  </entry>
  <entry>
    <title>KMP Algorithm</title>
    <url>/2025/03/08/KMP-Algorithm/</url>
    <content><![CDATA[<h1 id="The-KMP-Algorithm"><a href="#The-KMP-Algorithm" class="headerlink" title="The KMP Algorithm"></a>The KMP Algorithm</h1><ol>
<li><a href="#introduction">Introduction to KMP Algorithm</a> </li>
<li><a href="#naive">Naive Pattern Searching Algorithm</a></li>
<li><a href="#core">Core Idea of the KMP Algorithm</a><ul>
<li><a href="#generate">How to generate the next array(LSP array)</a></li>
<li><a href="#match">KMP Matching Process</a></li>
</ul>
</li>
<li><a href="#java">Code Implementation using Java</a></li>
<li><a href="#analyse">Complexity Analysis</a><span id="more"></span></li>
</ol>
<h2 id="1-KMP-Algorithm"><a href="#1-KMP-Algorithm" class="headerlink" title="1.KMP Algorithm "></a>1.KMP Algorithm <a name="introduction"></a></h2><p>In computer science,the<strong>Knuth–Morris–Pratt</strong> algorithm(<strong>KMP algorithm</strong>) is a <a href="https://en.wikipedia.org/wiki/String-searching_algorithm">string-searching algorithm</a> that searches for occurrences of a word W within a main text string S by employing the observation that when a mismatch occurs, the word itself embodies sufficient information to determine where the next match could begin, thus bypassing re-examination of previously matched characters.It is an efficient string-matching technique that avoids unnecessary character comparisons by leveraging precomputed pattern data.Unlike the naive approach, KMP achieves <strong>O(n+m)</strong> time complexity, where <code>n=text</code> length and <code>m=pattern</code> length.</p>
<p>For example:</p>
<ul>
<li>Text string S &#x3D; “ABABDABACDABABCABAB”</li>
<li>Pattern string P &#x3D; “ABABC”<br>We need to find the position where <code>P</code> first appears in <code>S</code>.</li>
</ul>
<h2 id="2-Naive-brute-force-Pattern-Searching-Algorithm"><a href="#2-Naive-brute-force-Pattern-Searching-Algorithm" class="headerlink" title="2. Naive(brute force) Pattern Searching Algorithm "></a>2. Naive(brute force) Pattern Searching Algorithm <a name="naive"></a></h2><ul>
<li>We start at every index in the text and compare it with the first character of the pattern, if they match we move to the next character in both text and pattern.</li>
<li>If there is a mismatch, we start the same process for the next index of the text.<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">S: A B A B D A B A C D A B A B C A B A B</span><br><span class="line">P: A B A B C</span><br></pre></td></tr></table></figure>
When a mismatch occurs, the text pointer backtracks to i&#x3D;2, and the pattern pointer backtracks to j&#x3D;0.<br><strong>Disadvantage</strong>: The time complexity is<strong>O(n×m)</strong>(where n is the length of the text and m is the length of the pattern), which is inefficient.</li>
</ul>
<h2 id="3-Core-Idea-of-the-KMP-Algorithm"><a href="#3-Core-Idea-of-the-KMP-Algorithm" class="headerlink" title="3. Core Idea of the KMP Algorithm"></a>3. Core Idea of the KMP Algorithm<a name="core"></a></h2><p><strong>Core</strong>: Make use of the matched information to avoid invalid backtracking.<br><strong>Key points</strong>:</p>
<ul>
<li>Preprocess the pattern string <code>P</code> to generate the <code>LPS </code> array(here I use next array), which records the length of the longest common prefix and suffix for each position.</li>
<li>During matching, use the <code>LPS</code> array to quickly find the backtracking position of the pattern string.</li>
<li><strong>LPS</strong> is the <strong>Longest Proper Prefix</strong> which is also a <strong>Suffix</strong>. A proper prefix is a prefix that does not include whole string.</li>
</ul>
<h3 id="How-to-generate-the-next-array-LSP-array"><a href="#How-to-generate-the-next-array-LSP-array" class="headerlink" title="How to generate the next array(LSP array)"></a>How to generate the next array(LSP array)<a name="generate"></a></h3><p>The <code>next[j]</code> represents the length of the longest common prefix and suffix of the first <code>j</code> characters of the pattern string <code>P</code>.<br><strong>Rules</strong>:</p>
<ul>
<li><code>Prefix</code>: A continuous substring starting from the first character (excluding the last character).</li>
<li><code>Suffix</code>: A continuous substring ending with the last character (excluding the first character).</li>
<li><code>Longest common prefix and suffix</code>: The longest identical prefix and suffix.</li>
</ul>
<p>Example: Pattern&#x3D;”ABABC”</p>
<table>
<thead>
<tr>
<th align="center"><strong>j</strong></th>
<th align="center">0</th>
<th align="center">1</th>
<th align="center">2</th>
<th align="center">3</th>
<th align="center">4</th>
</tr>
</thead>
<tbody><tr>
<td align="center">char</td>
<td align="center">A</td>
<td align="center">B</td>
<td align="center">A</td>
<td align="center">B</td>
<td align="center">C</td>
</tr>
<tr>
<td align="center">next[j]</td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">1</td>
<td align="center">2</td>
<td align="center">0</td>
</tr>
</tbody></table>
<h3 id="KMP-Matching-Process"><a href="#KMP-Matching-Process" class="headerlink" title="KMP Matching Process"></a>KMP Matching Process<a name="match"></a></h3><ul>
<li>Initialize pointers: Set the text pointer i &#x3D; 0 and the pattern pointer j &#x3D; 0.</li>
<li>Compare characters one by one:<ul>
<li>If S[i] &#x3D;&#x3D; P[j], move both i and j to the right.</li>
<li>If there is a mismatch:<ul>
<li>If j &gt; 0, set j &#x3D; next[j - 1] (backtrack using the next array).</li>
<li>If j &#x3D;&#x3D; 0, move i to the right.</li>
</ul>
</li>
</ul>
</li>
<li>Matching success: When j &#x3D;&#x3D; m, return i - m</li>
</ul>
<p>The whole Matching process:</p>
<ol>
<li>Initially, i &#x3D; 0, j &#x3D; 0 → S[0]&#x3D;A &#x3D;&#x3D; P[0] → i &#x3D; 1, j &#x3D; 1.</li>
<li>S[1]&#x3D;B &#x3D;&#x3D; P[1] → i &#x3D; 2, j &#x3D; 2.</li>
<li>S[2]&#x3D;A &#x3D;&#x3D; P[2] → i &#x3D; 3, j &#x3D; 3.</li>
<li>S[3]&#x3D;B &#x3D;&#x3D; P[3] → i &#x3D; 4, j &#x3D; 4.</li>
<li>S[4]&#x3D;D ≠ P[4]&#x3D;C → j &#x3D; next[3]&#x3D;2.</li>
<li>S[4]&#x3D;D ≠ P[2]&#x3D;A → j &#x3D; next[1]&#x3D;0.</li>
<li>S[4]&#x3D;D ≠ P[0]&#x3D;A → i &#x3D; 5, j &#x3D; 0.</li>
<li>Continue matching until the position of <code>P</code> is found.</li>
</ol>
<h2 id="4-Code-Implementation-using-Java"><a href="#4-Code-Implementation-using-Java" class="headerlink" title="4. Code Implementation using Java "></a>4. Code Implementation using Java <a name="java"></a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class KMPAlgorithm &#123;</span><br><span class="line">    public static int kmpSearch(String s, String p) &#123;</span><br><span class="line">        int n = s.length();</span><br><span class="line">        int m = p.length();</span><br><span class="line">        int[] next = computeNext(p);</span><br><span class="line">        int i = 0;</span><br><span class="line">        int j = 0;</span><br><span class="line">        while (i &lt; n) &#123;</span><br><span class="line">            if (s.charAt(i) == p.charAt(j)) &#123;</span><br><span class="line">                i++;</span><br><span class="line">                j++;</span><br><span class="line">                if (j == m) &#123;</span><br><span class="line">                    return i - m;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                if (j &gt; 0) &#123;</span><br><span class="line">                    j = next[j - 1];</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return -1;</span><br><span class="line">&#125;</span><br><span class="line">public static int[] computeNext(String p) &#123;</span><br><span class="line">    int m = p.length();</span><br><span class="line">    int[] next = new int[m];</span><br><span class="line">    int j = 0;</span><br><span class="line">    for (int i = 1; i &lt; m; i++) &#123;</span><br><span class="line">            while (j &gt; 0 &amp;&amp; p.charAt(i) != p.charAt(j)) &#123;</span><br><span class="line">                j = next[j - 1];</span><br><span class="line">            &#125;</span><br><span class="line">            if (p.charAt(i) == p.charAt(j)) &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            next[i] = j;</span><br><span class="line">        &#125;</span><br><span class="line">    return next;</span><br><span class="line">&#125;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        String s = &quot;ABABDABACDABABCABAB&quot;;</span><br><span class="line">        String p = &quot;ABABCABAB&quot;;</span><br><span class="line">        int index = kmpSearch(s, p);</span><br><span class="line">        if (index != -1) &#123;</span><br><span class="line">            System.out.println(&quot;The pattern string first appears at position: &quot; + index);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            System.out.println(&quot;The pattern string was not found.&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-Complexity-Analysis"><a href="#5-Complexity-Analysis" class="headerlink" title="5. Complexity Analysis "></a>5. Complexity Analysis <a name="analyse"></a></h2><p><strong>Time complexity</strong>: Pre - processing the next array takes <code>O(m)</code> time, and the matching process takes <code>O(n)</code> time. So the total time complexity is <strong>O(n+m)</strong>.<br><strong>Space complexity</strong>: Storing the next array requires <strong>O(m)</strong> space.</p>
<link rel="stylesheet" href="/css/folder.css" type="text/css"><script src="/js/folder.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Data Structure and Alogrithm</category>
      </categories>
      <tags>
        <tag>Data Structure and Alogrithm</tag>
      </tags>
  </entry>
  <entry>
    <title>Doubly Linked List</title>
    <url>/2025/02/19/doublylinkedlist/</url>
    <content><![CDATA[<h1 id="Doubly-Linked-List-in-C-A-Fun-and-Practical-Guide"><a href="#Doubly-Linked-List-in-C-A-Fun-and-Practical-Guide" class="headerlink" title="Doubly Linked List in C#: A Fun and Practical Guide"></a>Doubly Linked List in C#: A Fun and Practical Guide</h1><ol>
<li><a href="#what-is-a-doubly-linked-list">What is a Doubly Linked List?</a></li>
<li><a href="#creating-a-doubly-linked-list-class">Creating a Doubly Linked List Class</a></li>
<li><a href="#insertion-operations">Insertion Operations</a><ul>
<li><a href="#insert-at-the-beginning">Insert at the Beginning</a></li>
<li><a href="#insert-at-the-end">Insert at the End</a></li>
<li><a href="#insert-after-a-spefific-node">Insert after a spefific Node</a></li>
</ul>
</li>
<li><a href="#deletion-operations">Deletion Operations</a><span id="more"></span></li>
<li><a href="#traversal">Traversal</a><ul>
<li><a href="#forward-traversal">Forward Traversal</a></li>
<li><a href="#backward-traversal">Backward Traversal</a></li>
</ul>
</li>
<li><a href="#search">Search Node</a></li>
<li><a href="#complexity">Complexity Analysis</a></li>
<li><a href="#use">Use Cases</a></li>
<li><a href="#conclusion">Conclusion</a></li>
</ol>
<h2 id="1-What-is-a-Doubly-Linked-List"><a href="#1-What-is-a-Doubly-Linked-List" class="headerlink" title="1. What is a Doubly Linked List?"></a>1. What is a Doubly Linked List?<a name="what-is-a-doubly-linked-list"></a></h2><p>In a Doubly Linked List, each node contains two links - the first link points to the previous node and the next link points to the next node in the sequence.The prev pointer of the first node and next pointer of the last node will point to null.<br><img src="/uploads/2.png" alt="pic"></p>
<p>Let us start by defining the <code>Node</code> class using C#:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Node&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line">    public T Data &#123; get; set; &#125; </span><br><span class="line">    public Node&lt;T&gt; Next &#123; get; set; &#125;</span><br><span class="line">    public Node&lt;T&gt; Prev &#123; get; set; &#125;</span><br><span class="line"></span><br><span class="line">    public Node (T data)</span><br><span class="line">    &#123;</span><br><span class="line">        Data = data;</span><br><span class="line">        Next = null;</span><br><span class="line">        Prev = null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-Creating-a-Doubly-Linked-List-Class"><a href="#2-Creating-a-Doubly-Linked-List-Class" class="headerlink" title="2. Creating a Doubly Linked List Class "></a>2. Creating a Doubly Linked List Class <a name="creating-a-doubly-linked-list-class"></a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class DoublyLinkedList&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line">    private Node&lt;T&gt; head;</span><br><span class="line">    private Node&lt;T&gt; tail;</span><br><span class="line"></span><br><span class="line">    private int size;</span><br><span class="line">    public DoublyLinkedList()</span><br><span class="line">    &#123;</span><br><span class="line">        head = null;</span><br><span class="line">        tail = null;</span><br><span class="line">        size = 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int Size() =&gt; size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-Insertion-Operations"><a href="#3-Insertion-Operations" class="headerlink" title="3. Insertion Operations "></a>3. Insertion Operations <a name="insertion-operations"></a></h2><h3 id="Insert-at-the-Beginning"><a href="#Insert-at-the-Beginning" class="headerlink" title="Insert at the Beginning "></a>Insert at the Beginning <a name="insert-at-the-beginning"></a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public void AddFirst(T data)</span><br><span class="line">&#123;</span><br><span class="line">     Node&lt;T&gt; newNode = new Node&lt;T&gt;(data);</span><br><span class="line">     if (head == null)</span><br><span class="line">     &#123;</span><br><span class="line">         head = tail = newNode;</span><br><span class="line">     &#125;</span><br><span class="line">     else</span><br><span class="line">     &#123;</span><br><span class="line">         newNode.Next = head;</span><br><span class="line">         head.Prev = newNode;</span><br><span class="line">         head = newNode;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Insert-at-the-End"><a href="#Insert-at-the-End" class="headerlink" title="Insert at the End "></a>Insert at the End <a name="insert-at-the-end"></a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public void AddTail(T data)</span><br><span class="line"> &#123;</span><br><span class="line">     Node&lt;T&gt; newNode = new Node&lt;T&gt;(data);</span><br><span class="line">     if (head == null)</span><br><span class="line">     &#123;</span><br><span class="line">         head = tail = newNode;</span><br><span class="line">     &#125;</span><br><span class="line">     else</span><br><span class="line">     &#123;</span><br><span class="line">         tail.Next = newNode;</span><br><span class="line">         newNode.Prev = tail;</span><br><span class="line">         tail = newNode;</span><br><span class="line">     &#125;</span><br><span class="line">     size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Insert-after-a-specific-Node"><a href="#Insert-after-a-specific-Node" class="headerlink" title="Insert after a specific Node "></a>Insert after a specific Node <a name="insert-after-a-spefific-node"></a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public void InsertAt(T data, int index)</span><br><span class="line">&#123;</span><br><span class="line">     if (index &lt; 0 || index&gt; size)</span><br><span class="line">     &#123;</span><br><span class="line">         throw new ArgumentOutOfRangeException(&quot;Index&quot;, index, &quot;Index must be non - negative&quot;);</span><br><span class="line">     &#125;</span><br><span class="line">     if(index == 0)</span><br><span class="line">     &#123;</span><br><span class="line">         AddFirst(data);</span><br><span class="line">         return;</span><br><span class="line">     &#125;</span><br><span class="line">     else if (index == size)</span><br><span class="line">     &#123;</span><br><span class="line">         AddTail(data);</span><br><span class="line">         return;</span><br><span class="line">     &#125;</span><br><span class="line">     else</span><br><span class="line">     &#123;</span><br><span class="line">         Node&lt;T&gt; current = head;</span><br><span class="line">         for (int i = 0; i &lt; index - 1; i++)</span><br><span class="line">         &#123;</span><br><span class="line">             current = current.Next;</span><br><span class="line">         &#125;</span><br><span class="line">         Node&lt;T&gt; newNode = new Node&lt;T&gt;(data);</span><br><span class="line">         newNode.Next = current.Next;</span><br><span class="line">         newNode.Prev = current;</span><br><span class="line">         current.Next.Prev = newNode;</span><br><span class="line">         current.Next = newNode;</span><br><span class="line">         size++;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-Deletion-Operation"><a href="#4-Deletion-Operation" class="headerlink" title="4. Deletion Operation "></a>4. Deletion Operation <a name="deletion-operations"></a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public void Delete(T Data)</span><br><span class="line"> &#123;</span><br><span class="line">     Node&lt;T&gt; current = head;</span><br><span class="line"></span><br><span class="line">     while (current != null)</span><br><span class="line">     &#123;</span><br><span class="line">         if (current.Data.Equals(Data))</span><br><span class="line">         &#123;</span><br><span class="line">             //if the node is not the head</span><br><span class="line">             if (current.Prev != null)</span><br><span class="line">             &#123;</span><br><span class="line">                 current.Prev.Next = current.Next;</span><br><span class="line">             &#125;</span><br><span class="line">             else</span><br><span class="line">             &#123;</span><br><span class="line">                 head = current.Next;</span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line">             if (current.Next != null)</span><br><span class="line">             &#123;</span><br><span class="line">                 current.Next.Prev = current.Prev;</span><br><span class="line">             &#125;</span><br><span class="line">             else</span><br><span class="line">             &#123;</span><br><span class="line">                 tail = current.Prev;</span><br><span class="line">             &#125;</span><br><span class="line">             size--;</span><br><span class="line">             return;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         current = current.Next;</span><br><span class="line">     &#125;</span><br><span class="line">     Console.WriteLine(&quot;Node with data &#123;0&#125; not found&quot;, Data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-Traversal"><a href="#5-Traversal" class="headerlink" title="5. Traversal "></a>5. Traversal <a name="traversal"></a></h2><h3 id="Forward-Traversal"><a href="#Forward-Traversal" class="headerlink" title="Forward Traversal "></a>Forward Traversal <a name="forward-traversal"></a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public void PrintForward()</span><br><span class="line">&#123;</span><br><span class="line">    Node&lt;T&gt; current = head;</span><br><span class="line">    while (current != null)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.Write(current.Data + &quot; &quot;);</span><br><span class="line">        current = current.Next;</span><br><span class="line">    &#125;</span><br><span class="line">    Console.WriteLine();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Backward-Traversal"><a href="#Backward-Traversal" class="headerlink" title="Backward Traversal "></a>Backward Traversal <a name="backward-traversal"></a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public void PrintBackward()</span><br><span class="line">&#123;</span><br><span class="line">    Node&lt;T&gt; current = tail;</span><br><span class="line">    while (current != null)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.Write(current.Data + &quot; &quot;);</span><br><span class="line">        current = current.Prev;</span><br><span class="line">    &#125;</span><br><span class="line">    Console.WriteLine();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="6-Search-Node"><a href="#6-Search-Node" class="headerlink" title="6. Search Node "></a>6. Search Node <a name="search"></a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public void Find(T Data)</span><br><span class="line">&#123;</span><br><span class="line">     Node&lt;T&gt; current = head;</span><br><span class="line">     while (current != null)</span><br><span class="line">     &#123;</span><br><span class="line">         if (current.Data.Equals(Data))</span><br><span class="line">         &#123;</span><br><span class="line">             Console.WriteLine(&quot;Found: &quot; + Data);</span><br><span class="line">             return;</span><br><span class="line">         &#125;</span><br><span class="line">         current = current.Next;</span><br><span class="line">     &#125;</span><br><span class="line">     Console.WriteLine(&quot;Not Found: &quot; + Data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="7-Complexity-Analysis"><a href="#7-Complexity-Analysis" class="headerlink" title="7. Complexity Analysis "></a>7. Complexity Analysis <a name="Complexity"></a></h2><table>
<thead>
<tr>
<th align="center">Operation</th>
<th align="center">Time Complexity</th>
<th align="center">Space Complexity</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Insertion</td>
<td align="center">O(1)&#x2F;O(n)</td>
<td align="center">O(1)</td>
</tr>
<tr>
<td align="center">Deletion</td>
<td align="center">O(1)</td>
<td align="center">O(1)</td>
</tr>
<tr>
<td align="center">Search</td>
<td align="center">O(n)</td>
<td align="center">O(1)</td>
</tr>
<tr>
<td align="center">Traverse</td>
<td align="center">O(n)</td>
<td align="center">O(1)</td>
</tr>
</tbody></table>
<h2 id="8-Use-Cases"><a href="#8-Use-Cases" class="headerlink" title="8. Use Cases "></a>8. Use Cases <a name="use"></a></h2><ul>
<li>Browser history management</li>
<li>Music&#x2F;Video playlists</li>
<li>Undo&#x2F;Redo functionality</li>
<li>Navigation systems</li>
</ul>
<h2 id="9-Conclusion"><a href="#9-Conclusion" class="headerlink" title="9. Conclusion  "></a>9. Conclusion  <a name="conclusion"></a></h2><p><strong>Doubly Linked Lists</strong> provide enhanced flexibility compared to single linked lists at the cost of additional memory usage.They are particularly useful in scenarios requiring bidirectional traversal and frequent modifications.When implementing DLLs, careful pointer management is crucial to avoid broken links and memory leaks.</p>
<link rel="stylesheet" href="/css/folder.css" type="text/css"><script src="/js/folder.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Data Structure and Alogrithm</category>
      </categories>
      <tags>
        <tag>Data Structure and Alogrithm</tag>
      </tags>
  </entry>
  <entry>
    <title>Stack &amp; Queue</title>
    <url>/2025/04/12/Stack-Queue/</url>
    <content><![CDATA[<ol>
<li><a href="#introduction">Introduction</a>  </li>
<li><a href="#stack-overview">Stack Overview</a>  <ul>
<li><a href="#key-features-of-stack">Key Features</a>  </li>
<li><a href="#applications-of-stack">Applications</a></li>
</ul>
</li>
<li><a href="#queue-overview">Queue Overview</a>  <ul>
<li><a href="#key-features-of-queue">Key Features</a>  </li>
<li><a href="#applications-of-queue">Applications</a>  </li>
<li><a href="#type">Types of Queues</a></li>
</ul>
</li>
<li><a href="#implementing-stack">Implementing Stack</a>  <ul>
<li><a href="#stack-implementation-using-array">With Array</a>  </li>
<li><a href="#stack-implementation-using-linked-list">With Linked List</a></li>
</ul>
</li>
<li><a href="#implementing-queue">Implementing Queue</a>  <ul>
<li><a href="#queue-implementation-using-array">With Array</a>  </li>
<li><a href="#queue-implementation-using-linked-list">With Linked List</a></li>
</ul>
</li>
<li><a href="#implementing-queue-with-two-stacks">Implementing Queue with Two Stacks</a>  </li>
<li><a href="#implementing-stack-with-one-queue">Implement Stack using just one Queue</a>  </li>
<li><a href="#summary">Summary</a>  <span id="more"></span></li>
</ol>
<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction<a name="introduction"></a></h2><p>Stack is a linear data structure that follows <strong>Last In, First Out(LIFO)</strong> Principle, the last element inserted is the first to be popped out. It means both insertion and deletion operations happen at one end only.While Queue follows the principle of <strong>First In, First out (FIFO)</strong>, where the first element added to the queue is the first one to be removed. </p>
<ul>
<li><strong>Stack</strong>: Follows <strong>Last-In-First-Out (LIFO)</strong>.  </li>
<li><strong>Queue</strong>: Follows <strong>First-In-First-Out (FIFO)</strong>.</li>
</ul>
<h2 id="Stack-Overview"><a href="#Stack-Overview" class="headerlink" title="Stack Overview"></a>Stack Overview<a name="stack-overview"></a></h2><h3 id="Key-Features-of-Stack"><a href="#Key-Features-of-Stack" class="headerlink" title="Key Features of Stack"></a>Key Features of Stack<a name="key-features-of-stack"></a></h3><ul>
<li><strong>Top</strong>: The only accessible end for insertions&#x2F;deletions.  </li>
<li><strong>Operations</strong>:  <ul>
<li>push() to insert an element into the stack</li>
<li>pop() to remove an element from the stack</li>
<li>top() Returns the top element of the stack.</li>
<li>isEmpty() returns true if stack is empty else false.</li>
<li>isFull() returns true if the stack is full else false.</li>
</ul>
</li>
</ul>
<h3 id="Applications-of-Stack"><a href="#Applications-of-Stack" class="headerlink" title="Applications of Stack"></a>Applications of Stack<a name="applications-of-stack"></a></h3><ul>
<li>Function call management (call stack).  </li>
<li>Undo&#x2F;Redo functionality.  </li>
<li>Syntax parsing (e.g., matching parentheses).</li>
</ul>
<h2 id="Queue-Overview"><a href="#Queue-Overview" class="headerlink" title="Queue Overview"></a>Queue Overview<a name="queue-overview"></a></h2><h3 id="Key-Features-of-Queue"><a href="#Key-Features-of-Queue" class="headerlink" title="Key Features of Queue"></a>Key Features of Queue<a name="key-features-of-queue"></a></h3><ul>
<li><strong>Front&#x2F;Back</strong>: Elements enter at the back and exit from the front.  </li>
<li><strong>Operations</strong>:  <ul>
<li>Enqueue: Adds an element to the end (rear) of the queue. If the queue is full, an overflow error occurs.</li>
<li>Dequeue: Removes the element from the front of the queue. If the queue is empty, an underflow error occurs.</li>
<li>Peek&#x2F;Front: Returns the element at the front without removing it.</li>
<li>Size: Returns the number of elements in the queue.</li>
<li>isEmpty: Returns true if the queue is empty, otherwise false.</li>
<li>isFull: Returns true if the queue is full, otherwise false.</li>
</ul>
</li>
</ul>
<h3 id="Applications-of-Queue"><a href="#Applications-of-Queue" class="headerlink" title="Applications of Queue"></a>Applications of Queue<a name="applications-of-queue"></a></h3><ul>
<li>Task scheduling (e.g., printers managing print jobs).  </li>
<li>Breadth-First Search (BFS) in graph algorithms.  </li>
<li>Buffering data streams.</li>
</ul>
<h3 id="Types-of-Queues"><a href="#Types-of-Queues" class="headerlink" title="Types of Queues"></a>Types of Queues<a name="type"></a></h3><ol>
<li>Simple Queue: Simple Queue simply follows FIFO Structure. We can only insert the element at the back and remove the element from the front of the queue. A simple queue is efficiently implemented either using a linked list or a circular array.</li>
<li>Double-Ended Queue (Deque): In a double-ended queue the insertion and deletion operations, both can be performed from both ends. They are of two types:<br>Input Restricted Queue: This is a simple queue. In this type of queue, the input can be taken from only one end but deletion can be done from any of the ends.<br>Output Restricted Queue: This is also a simple queue. In this type of queue, the input can be taken from both ends but deletion can be done from only one end.</li>
<li>Priority Queue: A priority queue is a special queue where the elements are accessed based on the priority assigned to them. They are of two types:</li>
</ol>
<ul>
<li>Ascending Priority Queue: In Ascending Priority Queue, the elements are arranged in increasing order of their priority values. Element with smallest priority value is popped first.</li>
<li>Descending Priority Queue: In Descending Priority Queue, the elements are arranged in decreasing order of their priority values. Element with largest priority is popped first.<br><img src="/2025/04/12/Stack-Queue/sq1.png" alt="pic"></li>
</ul>
<h2 id="Implementing-Stack"><a href="#Implementing-Stack" class="headerlink" title="Implementing Stack "></a>Implementing Stack <a name="implementing-stack"></a></h2><h3 id="Stack-Implementation-Using-Array"><a href="#Stack-Implementation-Using-Array" class="headerlink" title="Stack Implementation Using Array"></a>Stack Implementation Using Array<a name="stack-implementation-using-array"></a></h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ArrayStack</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> T[] _array;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> _topIndex;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayStack</span>(<span class="params"><span class="built_in">int</span> capacity = <span class="number">4</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _array = <span class="keyword">new</span> T[capacity];</span><br><span class="line">        _topIndex = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Push</span>(<span class="params">T item</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_topIndex == _array.Length - <span class="number">1</span>)</span><br><span class="line">            Array.Resize(<span class="keyword">ref</span> _array, _array.Length * <span class="number">2</span>);</span><br><span class="line">        _array[++_topIndex] = item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">Pop</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (IsEmpty()) <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;Stack is empty.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> _array[_topIndex--];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">Peek</span>()</span> =&gt; IsEmpty() ? <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;Stack is empty.&quot;</span>) : _array[_topIndex];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">IsEmpty</span>()</span> =&gt; _topIndex == <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Stack-Implementation-Using-Linked-List"><a href="#Stack-Implementation-Using-Linked-List" class="headerlink" title="Stack Implementation Using Linked List"></a>Stack Implementation Using Linked List<a name="stack-implementation-using-linked-list"></a></h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> T Value;</span><br><span class="line">    <span class="keyword">public</span> Node&lt;T&gt; Next;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span>(<span class="params">T <span class="keyword">value</span></span>)</span> =&gt; Value = <span class="keyword">value</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LinkedListStack</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> Node&lt;T&gt; _top;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Push</span>(<span class="params">T item</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> newNode = <span class="keyword">new</span> Node&lt;T&gt;(item) &#123; Next = _top &#125;;</span><br><span class="line">        _top = newNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">Pop</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_top == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;Stack is empty.&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> <span class="keyword">value</span> = _top.Value;</span><br><span class="line">        _top = _top.Next;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">Peek</span>()</span> =&gt; _top == <span class="literal">null</span> ? <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;Stack is empty.&quot;</span>) : _top.Value;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">IsEmpty</span>()</span> =&gt; _top == <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Implementing-Queue"><a href="#Implementing-Queue" class="headerlink" title="Implementing Queue"></a>Implementing Queue<a name="implementing-queue"></a></h2><h3 id="Queue-Implementation-Using-Array"><a href="#Queue-Implementation-Using-Array" class="headerlink" title="Queue Implementation Using Array"></a>Queue Implementation Using Array<a name="queue-implementation-using-array"></a></h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ArrayQueue</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> T[] _array;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> _front;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> _back;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> _count;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayQueue</span>(<span class="params"><span class="built_in">int</span> capacity = <span class="number">4</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _array = <span class="keyword">new</span> T[capacity];</span><br><span class="line">        _front = <span class="number">0</span>;</span><br><span class="line">        _back = <span class="number">0</span>;</span><br><span class="line">        _count = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Enqueue</span>(<span class="params">T item</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_count == _array.Length)</span><br><span class="line">            Array.Resize(<span class="keyword">ref</span> _array, _array.Length * <span class="number">2</span>);</span><br><span class="line">        _array[_back % _array.Length] = item;</span><br><span class="line">        _back++;</span><br><span class="line">        _count++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">Dequeue</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (IsEmpty()) <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;Queue is empty.&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> <span class="keyword">value</span> = _array[_front % _array.Length];</span><br><span class="line">        _front++;</span><br><span class="line">        _count--;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">Peek</span>()</span> =&gt; IsEmpty() ? <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;Queue is empty.&quot;</span>) : _array[_front % _array.Length];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">IsEmpty</span>()</span> =&gt; _count == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Queue-Implementation-Using-Linked-List"><a href="#Queue-Implementation-Using-Linked-List" class="headerlink" title="Queue Implementation Using Linked List"></a>Queue Implementation Using Linked List<a name="queue-implementation-using-linked-list"></a></h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LinkedListQueue</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> Node&lt;T&gt; _front;</span><br><span class="line">    <span class="keyword">private</span> Node&lt;T&gt; _back;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Enqueue</span>(<span class="params">T item</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> newNode = <span class="keyword">new</span> Node&lt;T&gt;(item);</span><br><span class="line">        <span class="keyword">if</span> (_back != <span class="literal">null</span>) _back.Next = newNode;</span><br><span class="line">        _back = newNode;</span><br><span class="line">        <span class="keyword">if</span> (_front == <span class="literal">null</span>) _front = _back;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">Dequeue</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_front == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;Queue is empty.&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> <span class="keyword">value</span> = _front.Value;</span><br><span class="line">        _front = _front.Next;</span><br><span class="line">        <span class="keyword">if</span> (_front == <span class="literal">null</span>) _back = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">Peek</span>()</span> =&gt; _front == <span class="literal">null</span> ? <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;Queue is empty.&quot;</span>) : _front.Value;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">IsEmpty</span>()</span> =&gt; _front == <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Implementing-Queue-using-Stacks"><a href="#Implementing-Queue-using-Stacks" class="headerlink" title="Implementing Queue using Stacks "></a>Implementing Queue using Stacks <a name="implementing-queue-with-two-stacks"></a></h2><p>Use two stacks (inStack and outStack) to simulate FIFO behavior:</p>
<ul>
<li>inStack handles enqueue operations (Enqueue).</li>
<li>outStack handles dequeue operations (Dequeue). When outStack is empty, pop all elements from inStack and push them into outStack to reverse the order.<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StackToQueue</span>&lt;<span class="title">T</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> Stack&lt;T&gt; _inStack;</span><br><span class="line">    <span class="keyword">private</span> Stack&lt;T&gt; _outStack;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StackToQueue</span>()</span> &#123;</span><br><span class="line">        _inStack = <span class="keyword">new</span> Stack&lt;T&gt;();</span><br><span class="line">        _outStack = <span class="keyword">new</span> Stack&lt;T&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Enqueue</span>(<span class="params">T item</span>)</span> &#123;</span><br><span class="line">        _inStack.Push(item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">Dequeue</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (IsEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;Queue is empty&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        MoveInToOut(); <span class="comment">// Ensure outStack has elements</span></span><br><span class="line">        <span class="keyword">return</span> _outStack.Pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">Peek</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (IsEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;Queue is empty&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        MoveInToOut();</span><br><span class="line">        <span class="keyword">return</span> _outStack.Peek();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">MoveInToOut</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (_outStack.Count == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (_inStack.Count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                _outStack.Push(_inStack.Pop());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">IsEmpty</span>()</span> =&gt; _inStack.Count + _outStack.Count == <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Count =&gt; _inStack.Count + _outStack.Count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Implement-Stack-using-just-one-Queue"><a href="#Implement-Stack-using-just-one-Queue" class="headerlink" title="Implement Stack using just one Queue"></a>Implement Stack using just one Queue<a name="implementing-stack-with-one-queue"></a></h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyStack</span> &#123;</span><br><span class="line">    Queue&lt;<span class="built_in">int</span>&gt; myQueue;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyStack</span>()</span> &#123;</span><br><span class="line">        myQueue = <span class="keyword">new</span> Queue&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Push</span>(<span class="params"><span class="built_in">int</span> x</span>)</span> &#123;</span><br><span class="line">        myQueue.Enqueue(x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Pop</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; myQueue.Count<span class="number">-1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            myQueue.Enqueue(myQueue.Dequeue());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> myQueue.Dequeue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//reuse Pop()</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Top</span>()</span> &#123;</span><br><span class="line">        <span class="built_in">int</span> res = Pop();</span><br><span class="line">        myQueue.Enqueue(res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">Empty</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (myQueue.Count == <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary<a name="summary"></a></h2><table>
<thead>
<tr>
<th align="center"><strong>Data Structure</strong></th>
<th align="center"><strong>Logical Characteristic</strong></th>
<th align="center"><strong>Typical Scenarios</strong></th>
<th align="center"><strong>Advantages of Array-base</strong></th>
<th align="center"><strong>Advantages of Linked List-based</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center">Stack</td>
<td align="center">LIFO</td>
<td align="center">Expression evaluation, Undo operations</td>
<td align="center">Fast access</td>
<td align="center">No need for pre-allocation</td>
</tr>
<tr>
<td align="center">Queue</td>
<td align="center">FIFO</td>
<td align="center">Task scheduling, Message queues</td>
<td align="center">Continuous memory</td>
<td align="center">Flexible dynamic resizing</td>
</tr>
</tbody></table>
<h3 id="Significance-of-Mutual-Implementation"><a href="#Significance-of-Mutual-Implementation" class="headerlink" title="Significance of Mutual Implementation"></a>Significance of Mutual Implementation</h3><ul>
<li><strong>Queue using Stacks</strong>: Understand the conversion between LIFO and FIFO, leveraging stack properties to simulate queue behavior.</li>
<li><strong>Stack using Queues</strong>: Deeply understand the underlying principles of data structures and master algorithm design in complex scenarios.</li>
</ul>
<link rel="stylesheet" href="/css/folder.css" type="text/css"><script src="/js/folder.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Data Structure and Alogrithm</category>
      </categories>
      <tags>
        <tag>Data Structure and Alogrithm</tag>
      </tags>
  </entry>
  <entry>
    <title>Singly Linked List</title>
    <url>/2025/02/18/Single-Linked-List/</url>
    <content><![CDATA[<h2 id="Singly-Linked-List-Concepts-and-Operations"><a href="#Singly-Linked-List-Concepts-and-Operations" class="headerlink" title="Singly Linked List: Concepts and Operations"></a>Singly Linked List: Concepts and Operations</h2><ol>
<li><a href="#1-overview-of-singly-linked-list">Overview of Singly Linked List</a></li>
<li><a href="#2-advantages-of-linked-list">Advantages of Linked List</a></li>
<li><a href="#3-types-of-linked-list">Types of Linked List</a></li>
<li><a href="#4-how-to-create-a-linked-list">How to Create a Linked List</a></li>
<li><a href="#5-various-operations-on-linked-list">Various Operations on Linked List</a><span id="more"></span></li>
</ol>
<h3 id="Overview-of-Singly-Linked-List"><a href="#Overview-of-Singly-Linked-List" class="headerlink" title="Overview of Singly Linked List "></a>Overview of Singly Linked List <a name="1-overview-of-singly-linked-list"></a></h3><p><strong>What is a Linked List?</strong><br>In C#, a linked list is a linear data structure that stores elements in non - contiguous memory locations.<br>Each node consists of two parts:</p>
<ol>
<li><strong>Data</strong>: Each node of a linked list can store a piece of data.</li>
<li><strong>Address</strong>: Each node of a linked list contains the address of the next node, referred to as “Next”.</li>
</ol>
<p><img src="/images/1.png" alt="pic"><br>The first node of a linked list is referenced by a pointer called <strong>“Head”</strong>.</p>
<h3 id="Advantages-of-Linked-List"><a href="#Advantages-of-Linked-List" class="headerlink" title="Advantages of Linked List "></a>Advantages of Linked List <a name="2-advantages-of-linked-list"></a></h3><ol>
<li>They are dynamic in nature and allocate memory as needed.</li>
<li>Insertion and deletion operations are easy to implement.</li>
<li>Other data structures such as stacks and queues can also be easily implemented using linked lists.</li>
<li>They have fast access times and can be expanded in constant time without memory overhead.</li>
<li>Since there is no need to define an initial size for a linked list, memory utilization is efficient.</li>
<li>Backtracking is possible in doubly - linked lists.</li>
</ol>
<p><strong>Node Class</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Node&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line">    public T Data &#123; get; set; &#125;</span><br><span class="line">    public Node&lt;T&gt; Next &#123; get; set; &#125;</span><br><span class="line">    public Node(T data)</span><br><span class="line">    &#123;</span><br><span class="line">        Data = data;</span><br><span class="line">        Next = null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Types-of-Linked-List"><a href="#Types-of-Linked-List" class="headerlink" title="Types of Linked List "></a>Types of Linked List <a name="3-types-of-linked-list"></a></h3><ul>
<li><strong>Singly linked lists</strong></li>
<li><strong>Doubly linked lists</strong></li>
<li><strong>Circular linked lists</strong></li>
<li><strong>Circular doubly linked lists</strong></li>
</ul>
<h3 id="How-to-Create-a-Linked-List"><a href="#How-to-Create-a-Linked-List" class="headerlink" title="How to Create a Linked List "></a>How to Create a Linked List <a name="4-how-to-create-a-linked-list"></a></h3><p>Combined with the above node class, you can gradually build a linked list by instantiating nodes and setting their Next pointers. For example:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Node&lt;int&gt; node1 = new Node&lt;int&gt;(1);</span><br><span class="line">Node&lt;int&gt; node2 = new Node&lt;int&gt;(2);</span><br><span class="line">node1.Next = node2;</span><br></pre></td></tr></table></figure>
<p>&#x2F;&#x2F; Here, node1 serves as the head node to build a simple linked list</p>
<h3 id="Various-Operations-on-Linked-List"><a href="#Various-Operations-on-Linked-List" class="headerlink" title="Various Operations on Linked List "></a>Various Operations on Linked List <a name="5-various-operations-on-linked-list"></a></h3><p>Linked List Class Definition</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class LinkedList&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line">    // The head node of the linked list</span><br><span class="line">    private Node&lt;T&gt; head;</span><br><span class="line">    // The length of the linked list</span><br><span class="line">    private int length;</span><br><span class="line"></span><br><span class="line">    public LinkedList()</span><br><span class="line">    &#123;</span><br><span class="line">        head = null;</span><br><span class="line">        length = 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int Length =&gt; length;</span><br><span class="line">    public bool IsEmpty() =&gt; (length == 0);</span><br><span class="line"></span><br><span class="line">    // Add a new node at the beginning of the linked list</span><br><span class="line">    public void AddFirst(T data)</span><br><span class="line">    &#123;</span><br><span class="line">        Node&lt;T&gt; newNode = new Node&lt;T&gt;(data);</span><br><span class="line">        newNode.Next = head;</span><br><span class="line">        // Update the new node as the head of the linked list</span><br><span class="line">        head = newNode;</span><br><span class="line">        length++;</span><br><span class="line">    &#125;</span><br><span class="line">    // Add a new node at the end of the linked list</span><br><span class="line">    public void AddTail(T data)</span><br><span class="line">    &#123;</span><br><span class="line">        Node&lt;T&gt; newNode = new Node&lt;T&gt;(data);</span><br><span class="line">        if (head == null)</span><br><span class="line">        &#123;</span><br><span class="line">            head = newNode;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        Node&lt;T&gt; current = head;</span><br><span class="line">        while (current.Next != null)</span><br><span class="line">        &#123;</span><br><span class="line">            current = current.Next;</span><br><span class="line">        &#125;</span><br><span class="line">        current.Next = newNode;</span><br><span class="line">        length++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void DeleteElemets(T Data)</span><br><span class="line">    &#123;</span><br><span class="line">        Node&lt;T&gt; dummyHead = new Node&lt;T&gt;(default(T));</span><br><span class="line">        dummyHead.Next = head;</span><br><span class="line">        Node&lt;T&gt; temp = dummyHead;</span><br><span class="line">        while (temp.Next != null)</span><br><span class="line">        &#123;</span><br><span class="line">            if (temp.Next.Data.Equals(Data))</span><br><span class="line">            &#123;</span><br><span class="line">                temp.Next = temp.Next.Next;</span><br><span class="line">                length--;</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                temp = temp.Next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        // return dummyHead.Next;</span><br><span class="line">    &#125;</span><br><span class="line">    public void Delete(T Data)</span><br><span class="line">    &#123;</span><br><span class="line">        if (head == null) return;</span><br><span class="line">        if (head.Data.Equals(Data))</span><br><span class="line">        &#123;</span><br><span class="line">            head = head.Next;</span><br><span class="line">            length--;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        Node&lt;T&gt; current = head;</span><br><span class="line">        while (current != null &amp;&amp; current.Next != null)</span><br><span class="line">        &#123;</span><br><span class="line">            if (current.Next.Data.Equals(Data))</span><br><span class="line">            &#123;</span><br><span class="line">                current.Next = current.Next.Next;</span><br><span class="line">                length--;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            current = current.Next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public void DeleteAtHead()</span><br><span class="line">    &#123;</span><br><span class="line">        if (head == null) return;</span><br><span class="line">        head = head.Next;</span><br><span class="line">        length--;</span><br><span class="line">    &#125;</span><br><span class="line">    public void Find(T Data)</span><br><span class="line">    &#123;</span><br><span class="line">        if (head == null)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;The Linked List is null, can&#x27;t find the data&quot;);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        Node&lt;T&gt; current = head;</span><br><span class="line">        while (current != null)</span><br><span class="line">        &#123;</span><br><span class="line">            if (current.Data.Equals(Data))</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(&quot;Found the data: &quot; + Data);</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            current = current.Next;</span><br><span class="line">        &#125;</span><br><span class="line">        Console.WriteLine(&quot;Not Found the data: &quot; + Data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void InsertAt(int index, T data)</span><br><span class="line">    &#123;</span><br><span class="line">        if (index &lt; 0)</span><br><span class="line">        &#123;</span><br><span class="line">            throw new ArgumentOutOfRangeException(&quot;Index&quot;, index, &quot;Index must be non - negative&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        Node&lt;T&gt; newNode = new Node&lt;T&gt;(data);</span><br><span class="line">        if (index == 0)</span><br><span class="line">        &#123;</span><br><span class="line">            AddFirst(data);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        Node&lt;T&gt; current = head;</span><br><span class="line">        for (int i = 0; i &lt; index - 1; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            if (current == null || current.Next == null)</span><br><span class="line">            &#123;</span><br><span class="line">                throw new ArgumentOutOfRangeException(&quot;Index&quot;, index, &quot;Index is out of range&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            current = current.Next;</span><br><span class="line">        &#125;</span><br><span class="line">        newNode.Next = current.Next;</span><br><span class="line">        current.Next = newNode;</span><br><span class="line">        length++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void Print()</span><br><span class="line">    &#123;</span><br><span class="line">        Node&lt;T&gt; current = head;</span><br><span class="line">        if (current == null)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;null&quot;);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        while (current != null)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.Write(current.Data + &quot;-&gt;&quot;);</span><br><span class="line">            current = current.Next;</span><br><span class="line">        &#125;</span><br><span class="line">        Console.Write(&quot;null&quot;);</span><br><span class="line">        Console.WriteLine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Additional-Exercises"><a href="#Additional-Exercises" class="headerlink" title="Additional Exercises:"></a>Additional Exercises:</h3><h4 id="How-to-Reverse-a-Linked-List"><a href="#How-to-Reverse-a-Linked-List" class="headerlink" title="How to Reverse a Linked List?"></a>How to Reverse a Linked List?</h4><p>The time complexity is , and the space complexity is .</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public void ReverseList()</span><br><span class="line">&#123;</span><br><span class="line">    if (head.Next == null || head.Next.Next == null)</span><br><span class="line">    &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    Node&lt;T&gt; pre = null;</span><br><span class="line">    Node&lt;T&gt; current = head;</span><br><span class="line">    Node&lt;T&gt; temp = null;</span><br><span class="line">    while (current != null)</span><br><span class="line">    &#123;</span><br><span class="line">        // Store the key node to prevent data loss</span><br><span class="line">        temp = current.Next;</span><br><span class="line">        current.Next = pre;</span><br><span class="line">        pre = current;</span><br><span class="line">        current = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    head = pre;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="How-to-Find-the-k-th-Node-from-the-End-of-the-Linked-List"><a href="#How-to-Find-the-k-th-Node-from-the-End-of-the-Linked-List" class="headerlink" title="How to Find the k - th Node from the End of the Linked List"></a>How to Find the k - th Node from the End of the Linked List</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public Node&lt;T&gt; FindKthToLast(int k)</span><br><span class="line">&#123;</span><br><span class="line">    if (head == null || k &lt;= 0)</span><br><span class="line">    &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    Node&lt;T&gt; fast = head;</span><br><span class="line">    Node&lt;T&gt; slow = head;</span><br><span class="line">    // Let the fast pointer move k steps first, and the remaining is N - K steps, which is the K - th step from the end</span><br><span class="line">    for (int i = 0; i &lt; k; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if (fast == null)</span><br><span class="line">        &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        fast = fast.Next;</span><br><span class="line">    &#125;</span><br><span class="line">    // Move the fast and slow pointers together, and the slow pointer moves N - K steps</span><br><span class="line">    while (fast != null)</span><br><span class="line">    &#123;</span><br><span class="line">        fast = fast.Next;</span><br><span class="line">        slow = slow.Next;</span><br><span class="line">    &#125;</span><br><span class="line">    return slow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/folder.css" type="text/css"><script src="/js/folder.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Data Structure and Alogrithm</category>
      </categories>
      <tags>
        <tag>Data Structure and Alogrithm</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ:One broker to queue them all</title>
    <url>/2025/03/29/RabbitMQ-One-broker-to-queue-them-all/</url>
    <content><![CDATA[<ol>
<li><a href="#introduction">What is RabbitMQ</a> <ul>
<li><a href="#core">Core Concepts</a></li>
</ul>
</li>
<li><a href="#setup">Environment Setup</a><ul>
<li><a href="#docker">Docker (Recommended)</a></li>
</ul>
</li>
<li><a href="#user">Managing Users and Permissions</a></li>
<li><a href="#simple">Scenario: Producer sends messages, Consumer receives messages</a><ul>
<li><a href="#producer">Producer Code</a></li>
<li><a href="#consumer">Consumer Code</a></li>
<li><a href="#test">Run the test</a></li>
</ul>
</li>
<li><a href="#ensure">Advanced Features: Ensure Reliable Message Delivery</a><ul>
<li><a href="#persistence">Message Persistence</a></li>
<li><a href="#pub">Publisher Confirms</a></li>
<li><a href="#ack">Manual Consumer Acknowledgment</a></li>
</ul>
</li>
<li><a href="#best">Best Practices</a><ul>
<li><a href="#msg">Message Format</a></li>
<li><a href="#m">Monitoring</a><span id="more"></span></li>
</ul>
</li>
</ol>
<h2 id="What-is-RabbitMQ"><a href="#What-is-RabbitMQ" class="headerlink" title="What is RabbitMQ?"></a>What is RabbitMQ?<a name="introduction"></a></h2><p><strong>RabbitMQ</strong> is an open source message middleware that implements the <a href="https://en.wikipedia.org/wiki/Advanced_Message_Queuing_Protocol">AMQP</a> protocol(Advanced Message Queuing Protocol),designed for asynchronous communication in distributed systems.It facilitates asynchronous communication between applications, enabling decoupling and scalable architectures.It supports multiple programming languages and provides features like message persistence, flow control, and cluster deployment, widely used in microservices architecture, asynchronous task processing, and system decoupling.</p>
<h3 id="Core-Concepts"><a href="#Core-Concepts" class="headerlink" title="Core Concepts"></a>Core Concepts<a name="core"></a></h3><table>
<thead>
<tr>
<th><strong>Concept</strong></th>
<th><strong>Description</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>Producer</strong></td>
<td>An application that sends messages to an exchange.</td>
</tr>
<tr>
<td><strong>Consumer</strong></td>
<td>An application that receives messages from a queue and processes them.</td>
</tr>
<tr>
<td><strong>Exchange</strong></td>
<td>A component that determines message routing rules and distributes messages to queues based on bindings.</td>
</tr>
<tr>
<td><strong>Queue</strong></td>
<td>A container for storing messages, from which consumers pull messages.</td>
</tr>
<tr>
<td><strong>Binding</strong></td>
<td>Establishes a relationship between an exchange and a queue, defining routing conditions (e.g., routing keys).</td>
</tr>
<tr>
<td><strong>AMQP</strong></td>
<td>An application-layer protocol that defines communication standards for reliable message passing.</td>
</tr>
</tbody></table>
<p><img src="/2025/03/29/RabbitMQ-One-broker-to-queue-them-all/rabbit07.png" alt="pic"></p>
<h2 id="Environment-Setup"><a href="#Environment-Setup" class="headerlink" title="Environment Setup"></a>Environment Setup<a name="setup"></a></h2><h3 id="Docker-Recommended"><a href="#Docker-Recommended" class="headerlink" title="Docker (Recommended): "></a>Docker (Recommended): <a name="docker"></a></h3><p>Pulling the RabbitMQ Docker Imag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull rabbitmq:management</span><br></pre></td></tr></table></figure>
<p>Start a RabbitMQ instance and mount a custom configuration file from your host to the container.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -id --name=rabbitmq -v rabbitmq-home:/var/lib/rabbitmq </span><br><span class="line">-p 15672:15672 </span><br><span class="line">-p 5672:5672 </span><br><span class="line">-e RABBITMQ_DEFAULT_USER=***</span><br><span class="line">-e RABBITMQ_DEFAULT_PASS=***</span><br><span class="line">rabbitmq:management</span><br></pre></td></tr></table></figure>
<ul>
<li>-d runs the container in detached mode.</li>
<li>–name assigns a name to the container.</li>
<li>-p maps the ports from the container to your host machine. Port 5672 is for RabbitMQ server, and 15672 is for the management UI.<br>Access the RabbitMQ Management Console:</li>
<li>Open a web browser and navigate to <a href="http://localhost:15672/">http://localhost:15672/</a>.<br><img src="/2025/03/29/RabbitMQ-One-broker-to-queue-them-all/rabbit06.png" alt="pic"></li>
<li>Log in with the default username you set  and password you set in the above command.</li>
</ul>
<h2 id="Managing-Users-and-Permissions"><a href="#Managing-Users-and-Permissions" class="headerlink" title="Managing Users and Permissions"></a>Managing Users and Permissions<a name="user"></a></h2><p>To add a user, use rabbitmqctl add_user.<br><img src="/2025/03/29/RabbitMQ-One-broker-to-queue-them-all/rabbit04.png" alt="pic"></p>
<p>To grant permissions to a user in a virtual host, use rabbitmqctl set_permissions:<br><img src="/2025/03/29/RabbitMQ-One-broker-to-queue-them-all/rabbit05.png" alt="pic"><br>To list users in a cluster, use rabbitmqctl list_users:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rabbitmqctl list_users</span><br></pre></td></tr></table></figure>
<p>To delete a user, use rabbitmqctl delete_user:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rabbitmqctl delete_user &#x27;username&#x27;</span><br></pre></td></tr></table></figure>
<p>To revoke permissions from a user in a virtual host, use rabbitmqctl clear_permissions:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rabbitmqctl clear_permissions -p &quot;custom-vhost&quot; &quot;username&quot;</span><br></pre></td></tr></table></figure>


<h2 id="Scenario-Producer-sends-messages-Consumer-receives-messages"><a href="#Scenario-Producer-sends-messages-Consumer-receives-messages" class="headerlink" title="Scenario: Producer sends messages, Consumer receives messages"></a>Scenario: Producer sends messages, Consumer receives messages<a name="simple"></a></h2><h3 id="Producer-Code"><a href="#Producer-Code" class="headerlink" title="Producer Code"></a>Producer Code<a name="producer"></a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Producer</span><br><span class="line">&#123;</span><br><span class="line">    private const string QueueName = &quot;simple_queue&quot;;</span><br><span class="line"></span><br><span class="line">    public static void SendMessage(string message)</span><br><span class="line">    &#123;</span><br><span class="line">        var factory = new ConnectionFactory() &#123; </span><br><span class="line">            HostName = &quot;***&quot;,</span><br><span class="line">            VirtualHost = &quot;visual_knitting&quot;,</span><br><span class="line">            UserName = &quot;admin&quot;,</span><br><span class="line">            Password = &quot;123456&quot;,</span><br><span class="line">            Port = 5672</span><br><span class="line">         &#125;;</span><br><span class="line">        using (var connection = factory.CreateConnection())</span><br><span class="line">        using (var channel = connection.CreateModel())</span><br><span class="line">        &#123;</span><br><span class="line">            channel.QueueDeclare(</span><br><span class="line">                queue: QueueName,</span><br><span class="line">                durable: false,  // Store in memory (non-persistent)</span><br><span class="line">                exclusive: false, // Non-exclusive queue</span><br><span class="line">                autoDelete: false, // Do not auto-delete when empty</span><br><span class="line">                arguments: null</span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line">            var body = Encoding.UTF8.GetBytes(message);</span><br><span class="line">            channel.BasicPublish(</span><br><span class="line">                exchange: &quot;&quot;,       // Use default exchange (direct to queue)</span><br><span class="line">                routingKey: QueueName, // Routing key matches queue name</span><br><span class="line">                basicProperties: null,</span><br><span class="line">                body: body</span><br><span class="line">            );</span><br><span class="line">            Console.WriteLine($&quot;[Producer] Sent: &#123;message&#125;&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Consumer-Code"><a href="#Consumer-Code" class="headerlink" title="Consumer Code"></a>Consumer Code<a name="consumer"></a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Consumer</span><br><span class="line">&#123;</span><br><span class="line">    private const string QueueName = &quot;simple_queue&quot;;</span><br><span class="line"></span><br><span class="line">    public static void StartListening()</span><br><span class="line">    &#123;</span><br><span class="line">        var factory = new ConnectionFactory() &#123; </span><br><span class="line"></span><br><span class="line">            var factory = new ConnectionFactory() &#123; </span><br><span class="line">            HostName = &quot;***&quot;,</span><br><span class="line">            VirtualHost = &quot;visual_knitting&quot;,</span><br><span class="line">            UserName = &quot;admin&quot;,</span><br><span class="line">            Password = &quot;123456&quot;,</span><br><span class="line">            Port = 5672</span><br><span class="line">         &#125;;</span><br><span class="line">         &#125;;</span><br><span class="line">        using (var connection = factory.CreateConnection())</span><br><span class="line">        using (var channel = connection.CreateModel())</span><br><span class="line">        &#123;</span><br><span class="line">            channel.QueueDeclare(QueueName, false, false, false, null);</span><br><span class="line"></span><br><span class="line">            var consumer = new EventingBasicConsumer(channel);</span><br><span class="line">            consumer.Received += (model, ea) =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                var body = ea.Body.ToArray();</span><br><span class="line">                var message = Encoding.UTF8.GetString(body);</span><br><span class="line">                Console.WriteLine($&quot;[Consumer] Received: &#123;message&#125;&quot;);</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            channel.BasicConsume(</span><br><span class="line">                queue: QueueName,</span><br><span class="line">                autoAck: true,  // Auto-acknowledge messages upon receipt</span><br><span class="line">                consumer: consumer</span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(&quot;Consumer is waiting for messages. Press any key to exit.&quot;);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Run-the-test"><a href="#Run-the-test" class="headerlink" title="Run the test:"></a>Run the test:<a name="test"></a></h3><p>Send a message from the Producer:<br> <img src="/2025/03/29/RabbitMQ-One-broker-to-queue-them-all/rabbit08.png" alt="pic"><br>Consumer output:<br> <img src="/2025/03/29/RabbitMQ-One-broker-to-queue-them-all/rabbit09.png" alt="pic"></p>
<h2 id="Advanced-Features-Ensure-Reliable-Message-Delivery"><a href="#Advanced-Features-Ensure-Reliable-Message-Delivery" class="headerlink" title="Advanced Features: Ensure Reliable Message Delivery"></a>Advanced Features: Ensure Reliable Message Delivery<a name="ensure"></a></h2><h3 id="Message-Persistence"><a href="#Message-Persistence" class="headerlink" title="Message Persistence"></a>Message Persistence<a name="persistence"></a></h3><p><strong>Scenario: Prevent message loss on RabbitMQ restart</strong></p>
<ul>
<li>Queue Persistence: Set durable: true when declaring the queue.</li>
<li>Message Persistence: Set BasicProperties.Persistent &#x3D; true.<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Producer code for persistence</span><br><span class="line">channel.QueueDeclare(QueueName, durable: true, ...);</span><br><span class="line"></span><br><span class="line">var properties = channel.CreateBasicProperties();</span><br><span class="line">properties.Persistent = true; // Make messages persistent</span><br><span class="line">channel.BasicPublish(..., basicProperties: properties, ...);</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Publisher-Confirms"><a href="#Publisher-Confirms" class="headerlink" title="Publisher Confirms"></a>Publisher Confirms<a name="pub"></a></h3><p><strong>Scenario: Ensure messages reach RabbitMQ server successfully</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Enable publisher confirms</span><br><span class="line">channel.ConfirmSelect();</span><br><span class="line"></span><br><span class="line">channel.BasicPublish(...);</span><br><span class="line">if (channel.WaitForConfirms(TimeSpan.FromSeconds(5)))</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(&quot;Message confirmed by server.&quot;);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(&quot;Message confirmation timed out.&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Manual-Consumer-Acknowledgment"><a href="#Manual-Consumer-Acknowledgment" class="headerlink" title="Manual Consumer Acknowledgment"></a>Manual Consumer Acknowledgment<a name="ack"></a></h3><p><strong>Scenario: Avoid losing unprocessed messages (e.g., on consumer crash)</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Consumer code with manual acknowledgment (autoAck: false)</span><br><span class="line">channel.BasicConsume(</span><br><span class="line">    queue: QueueName,</span><br><span class="line">    autoAck: false,  // Disable auto-acknowledgment</span><br><span class="line">    consumer: consumer</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">consumer.Received += (model, ea) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    var deliveryTag = ea.DeliveryTag;</span><br><span class="line">    try</span><br><span class="line">    &#123;</span><br><span class="line">        // Process the message...</span><br><span class="line">        channel.BasicAck(deliveryTag, multiple: false); // Acknowledge single message</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception)</span><br><span class="line">    &#123;</span><br><span class="line">        channel.BasicNack(deliveryTag, multiple: false, requeue: true); // Requeue the message</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="Best-Practices"><a href="#Best-Practices" class="headerlink" title="Best Practices"></a>Best Practices<a name="best"></a></h2><h3 id="Message-Format"><a href="#Message-Format" class="headerlink" title="Message Format"></a>Message Format</h3><p>Use JSON for structured data, e.g:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;MessageId&quot;: &quot;12**&quot;,</span><br><span class="line">    &quot;Content&quot;: &quot;Order created&quot;,</span><br><span class="line">    &quot;Timestamp&quot;: &quot;2025-03-22T12:00:00&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Monitoring"><a href="#Monitoring" class="headerlink" title="Monitoring"></a>Monitoring</h3><ul>
<li>Use the RabbitMQ management dashboard to check queue status, connections, and resource usage.</li>
<li>Monitor performance with dotnet trace or tools like Prometheus + Grafana.</li>
</ul>
<link rel="stylesheet" href="/css/folder.css" type="text/css"><script src="/js/folder.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>C#/.NET</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
        <tag>MessageQueue</tag>
        <tag>MiddleWare</tag>
      </tags>
  </entry>
</search>
